\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cms\index.html
UpdateSector(content,~/api/CMS/GetContent/{{cmsQueryStringId}},,false,false,=)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cms\panelFile.html
ShowWindow(Loading);IF({{explorerFolderSelected.Code}},UpdateDataField(panelFileObject,ParentObjectCode,{{explorerFolderSelected.Code}}));PostDataItem(panelFileObject,panelFileObjectCode);CloseWindow();CloseWindow()
IF({{panelFileParameters.view}}=edit,UpdateDataField(panelFileObjectDownload,edit,true);UpdateDataField(panelFileObject,Code,{{panelFileParameters.code}});UpdateDataField(panelFileObject,ObjectCode,{{panelFileParameters.objectcode}});Execute(panelFileFunctionLoadFile))
IF({{panelFileBase64}}!=,UpdateItemField({{panelFileObject.Content}},{{panelFileBase64.Value}});UpdateItemField({{panelFileObject.Name}},{{panelFileBase64.Text}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cms\panelImage.html
UpdateDataField(panelImageObject,ParentCode,{{panelImageData.ParentCode}});IF({{panelImageData.editImage}},UpdateDataField(panelImageObject,Code,{{panelImageData.Code}});UpdateDataField(panelImageObject,ReferenceCode,{{panelImageData.ReferenceCode}});UpdateDataField(panelImageObject,Data,{{panelImageGet.Data}});UpdateDataField(panelImageObject,Name,{{panelImageGet.Name}}))
ShowWindow(Loading);PostDataItem(panelImageObject);CloseWindow();CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cms\panelImageView.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\panelCubeApplication.html
ShowWindow(Loading);UpdateDataField(panelCubeApplicationPostChanges,,{{panelCubeApplication}});PostDataItem(panelCubeApplicationPostChanges);UpdateDataFieldLookup(explorerObjects,Code,{{panelObjectClipboard.Code}},Name,{{panelCubeApplication.Name}});UpdateDataFieldLookup(explorerObjects,Code,{{panelObjectClipboard.Code}},Description,{{panelCubeApplication.Description}});Notify(explorerObjects);CloseWindow()
UpdateDataField(panelDefinitionClipboard,Icon,pp ppApplication);UpdateDataField(panelDefinitionClipboard,Title,{{word.Application}});IF({{panelObject.ReferenceCode}}<=0,UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.CreateApplication}}),UpdateDataField(panelDefinitionClipboard,Subtitle,{{explorerObjectSelected.Name}}))
IF({{panelCubeApplication.ConsolidationFeature}}!=,UpdateDataField(panelObjectClipboard,ConsolidationFeatureLoadDefaultParameters,false),UpdateDataField(panelObjectClipboard,ConsolidationFeatureLoadDefaultParameters,true))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\panelCubeApplicationConsolidationFeature.html
{{panelObjectClipboard.ConsolidationFeatureLoadDefaultParameters}}
UpdateDataField(panelDefinitionClipboard,Icon,pp ppApplication);IF({{panelCubeApplicationConsolidationFeatureLoadDefaultParameters}},Execute({{panelCubeApplicationConsolidationFeatureGetDefaultParameters}}))
UpdateDataField(panelObjectClipboard,AllowedCurrencies,CreateReference({{panelCubeApplicationConsolidationFeatureObject.AllowedCurrencies}}));UpdateDataField(panelObjectClipboard,CompleteListOfCurrencies,{{panelCubeApplicationConsolidationFeatureCurrencies}});UpdateDataField(panelObjectClipboard,StandardCurrency,{{panelCubeApplicationConsolidationFeatureObject.StandardCurrency}});ShowWindow(~/app/cube/panelManageCurrencies.html,panel)
UpdateDataField(panelObjectClipboard,AllowedCurrencies,CreateReference({{panelCubeApplicationConsolidationFeatureObject.AllowedCurrencies}}));UpdateDataField(panelObjectClipboard,CompleteListOfCurrencies,{{panelCubeApplicationConsolidationFeatureCurrencies}});ShowWindow(~/app/cube/panelCurrenciesShowAll.html,panel)
UpdateData(panelCubeApplicationConsolidationFeatureObject,{{panelCubeApplicationConsolidationFeatureDefaultOptions}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\panelCubeContext.html
IF({{panelExplorerObjectData.ReferenceCode}}=,UpdateDataField(panelCubeContextApplicationCodeSelected,Value,{{cubeContextListApplications.[0].Key}});UpdateDataField(panelObjectClipboard,ApplicationCode,{{cubeContextListApplications.[0].Key}});UpdateDataField(panelCubeContextTypeSelected,Value,{{cubeContextListContextTypes.[0].Value}}),UpdateDataField(panelCubeContextApplicationCodeSelected,Value,{{panelCubeContextObject.ApplicationCode}});UpdateDataField(panelObjectClipboard,ApplicationCode,{{panelCubeContextObject.ApplicationCode}});UpdateDataField(panelCubeContextTypeSelected,Value,{{panelCubeContextObject.Type}});UpdateDataField(panelCubeContextDescription,Value,{{panelCubeContextObject.Description}}));Execute({{panelCubeContextStartupExecute}})
UpdateDataField(panelExplorerObjectData,CubeContextType,{{panelCubeContextTypeSelected.Value}},false);UpdateDataField(panelCubeContextDescription,Value,{{panelCubeContextObject.Description}});UpdateDataField(panelCubeContextTypeSelected,Value,{{panelCubeContextObject.Type}})
UpdateData(panelCubeContextApplyValidation,false);Execute({{panelCubeContextCheckDimensionMemberSelected}});UpdateData(panelCubeContextPostDimensionMembers,{{panelCubeDimensions}});PostDataItem(panelCubeContextPostDimensionMembers)
ExecuteDataItem(IF({{formfilter.Members.length}}>0,UpdateData(panelCubeContextApplyValidation,true)),formfilter in panelCubeDimensions.FormFilters,true,true)
ShowWindow(Loading);UpdateDataField(panelCubeContextPostChanges,ExplorerObjectCode,{{panelExplorerObjectData.Code}});UpdateDataField(panelCubeContextPostChanges,ApplicationCode,{{panelCubeContextApplicationCodeSelected.Value}});UpdateDataField(panelCubeContextPostChanges,Type,{{panelCubeContextTypeSelected.Value}});UpdateDataField(panelCubeContextPostChanges,Name,{{panelExplorerObjectData.Name}});UpdateDataField(panelCubeContextPostChanges,Description,{{panelCubeContextDescription.Value}});IF({{panelExplorerObjectData.ReferenceCode}}>0,UpdateDataField(panelCubeContextPostChanges,Code,{{panelExplorerObjectData.ReferenceCode}}));UpdateDataField(panelCubeContextPostChanges,FormFilters,{{panelCubeDimensions.FormFilters}});PostDataItem(panelCubeContextPostChanges);ReloadData(explorerObjects);CloseWindow(panel);CloseWindow(windows)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\panelCurrenciesShowAll.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppApplication);UpdateData(panelCurrenciesShowAllSourceListBackup,{{panelCurrenciesShowAllSourceList}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\panelLinkedList.html
ShowWindow(Loading);UpdateDataField(linkedListObject,LinkedListItems,{{linkedListItems}});UpdateDataField(panelLinkedListPostChanges,,{{linkedListObject}});PostDataItem(panelLinkedListPostChanges);CloseWindow();CloseWindow()
UpdateItemField({{item.selection}},{{panelLinkedListItemsAllSelected}})
ExecuteDataItem({{panelLinkedListSelectItem}},item in linkedListItems,true,true)
ExecuteDataItem(UpdateItemField({{item.selection}},false,false),item in linkedListItems,true,true);IF({{linkedListObject.Code}}=0,UpdateDataField(linkedListObject,ApplicationCode,{{linkedListApplications.[0].Key}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\panelManageCurrencies.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppApplication);UpdateData(panelSelectCurrencyCompleteListBackup,{{panelSelectCurrencyCompleteList}})
UpdateDataFieldLookup(panelSelectCurrencyCompleteList,Value,{{item}},Selected,true,false)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\windowLock.html
UpdateDataField(windowDefinition,Title,{{text.LockUnlockApps}})
ShowWindow(Loading);UpdateDataField(windowLockCubeSelected,,{{cubeStatus}});IF(!{{windowLockCubeSelected.IsLocked}},PostDataItem(windowLockCubeLockRequest,windowLockCubeLockResponse);IF({{windowLockCubeLockResponse.Message}}!=,CloseWindow();ShowWindow(Error,[Message],{{windowLockCubeLockResponse.Message.Text}},[Details],{{windowLockCubeLockResponse.Message.Details}}),UpdateData(windowLockCubesStatus,{{windowLockCubeLockResponse.Data}});CloseWindow()),PostDataItem(windowLockCubeUnlockRequest,windowLockCubeUnlockResponse);IF({{windowLockCubeUnlockResponse.Message}},ShowWindow(Error,[Message],{{windowLockCubeUnlockResponse.Message.Text}},[Details],{{windowLockCubeUnlockResponse.Message.Details}}),UpdateData(windowLockCubesStatus,{{windowLockCubeUnlockResponse.Data}});CloseWindow()))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\windowPublish.html
UpdateDataField(windowDefinition,Title,{{text.PublishCube}});UpdateDataField(windowPublishSelectedApplication,Code,{{windowPublishApplications.[0].Key}})
IF({{windowPublishCanPublishCube.Data}},HideWindow();PostDataItem(windowPublishCube),UpdateData(systemClipboard,{{windowPublishCanPublishCube.Message.Text}});ShowWindow(Message,[Message],{{systemClipboard}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dashboard\index.html
UpdateDataField(dashboardObjectAction,action,mode,false);UpdateDataField(dashboardObjectAction,tag,view)
UpdateDataField(dashboardObjectAction,action,mode,false);UpdateDataField(dashboardObjectAction,tag,edit)
UpdateDataField(dashboardObjectAction,action,switchview,false);UpdateDataField(dashboardObjectAction,view,default)
UpdateDataField(dashboardObjectAction,action,switchview,false);UpdateDataField(dashboardObjectAction,view,mobile)
UpdateDataField(dashboardObjectAction,tag,,false);UpdateDataField(dashboardObjectAction,action,showproperties)
UpdateDataField(dashboardObjectAction,tag,,false);UpdateDataField(dashboardObjectAction,action,deletepart)
UpdateDataField(dashboardObjectAction,action,duplicate)
UpdateDataField(dashboardObjectAction,tag,{{dashboardObjectAction}},false);UpdateDataField(dashboardObjectAction,action,content)
IF(!{{dashboardReferenceCode}},UpdateDataField(dashboardObject,Name,{{explorerObject.Name}});UpdateDataField(dashboardObject,Description,{{explorerObject.Description}}));UnloadData(dashboardObjectSaveRequest,false);UpdateDataField(dashboardObject,,{{dashboardObjectSaveRequest.Dashboard}},true);UpdateData(dashboardReferenceCode,{{dashboardObject.Code}});ShowWindow(Message,[Message],{{text.DashboardSavedWithSuccess}})
UpdateDataField(panelDefinitionClipboard,Icon,pp ppDuplicate);UpdateDataField(panelDefinitionClipboard,Title,{{word.Publish}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dashboardObject.Name}});UpdateDataField(panelObjectClipboard,,{{dashboardObject}});ShowWindow(~/app/dashboard/panelDashboardPublish.html,panel)
UpdateDataField(dashboardObjectCode,,{{explorerObject.ObjectCode}});UpdateDataField(dashboardReferenceCode,,{{dashboardQueryString.code}});IF({{dashboardQueryString.view}}=1,Execute({{dashboardFunctionActionModeEdit}});UpdateSector(ribbon,~/app/dashboard/ribbon.html),Execute({{dashboardFunctionActionModeView}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dashboard\panelDashboardPublish.html
ShowWindow(Loading);PostDataItem(panelDashboardPublish);CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dashboard\panelDashboardTabProperties.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dashboard\panelWebPartPropertiesCMS.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dashboard\panelWebPartPropertiesExplorer.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dashboard\panelWebPartPropertiesReport.html
IF({{reportSsrsCustomAuthentication}},UpdateItemField({{enableToolbar}},false),IF({{dashboardObjectItem.Properties.EnableToolbar}}=false,UpdateItemField({{enableToolbar}},false),UpdateItemField({{enableToolbar}},true)))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dashboard\ribbon.html
UncheckItemField({{dashboardRainbowTabControl.newpart}});UpdateDataField(dashboardObjectAction,tag,{{item.Tag}},false);UpdateDataField(dashboardObjectAction,action,AddPart,true)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dashboard\webPartData.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataform\contentData.html
UpdateDataField(panelDefinition,ShowSave,true);UpdateDataField(panelDefinition,ShowReload,true);UpdateDataField(panelDefinition,ShowMaximize,true);
UpdateDataField(panelDefinition,ActionSave,{{panelButtonSaveAction}});UpdateDataField(panelDefinition,ActionCancel,{{panelButtonCancelAction}});UpdateDataField(panelDefinition,ActionReload,{{panelButtonReloadAction}})
UpdateDataField(panelDefinition,ValidationSave,mandatoryFields)
UpdateData(dataFormRow,{{dataFormRowBeforeAdd}});UpdateDataField(panelDefinition,ShowCancel,false);
IF({{sourceObject.TaskValue}},UpdateData(instanceCode,{{sourceObject.Code}});UpdateData(dataFormCode,{{sourceObject.TaskValue}}),IF({{dataFormCodeStatic}}!=,UpdateData(dataFormCode,{{dataFormCodeStatic}}),UpdateData(dataFormCode,{{sourceObject.ReferenceCode}})))
ShowWindow(Loading);ReloadData(dataFormItems,false);CloseWindow(windows);
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeNext}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodePrevious}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeFirst}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeLast}});CloseWindow();
ShowWindow(Confirm,[Message],{{text.DeleteMessageQuestion}},[Yes],{{dataFormRowRemoveAction}})
ShowWindow(Loading);UpdateData(dataFormRowRemove,{{dataFormRow}});PostDataItem(dataFormRowRemove,);UpdateData(dataFormRowDeleted,CreateGuid(),false);IF({{dataFormRow.CodeNext}},UpdateData(dataFormRowCode,{{dataFormRow.CodeNext}}),IF({{dataFormRow.CodePrevious}},UpdateData(dataFormRowCode,{{dataFormRow.CodePrevious}})));CloseWindow()
UpdateData(dataFormRowBeforeAdd,{{dataFormRow}});UpdateData(dataFormRow,{{dataFormRowEmpty}});Notify(dataFormRow);UpdateDataField(panelDefinition,ShowCancel,true);
UpdateDataField(instanceActionNote,Required,{{instanceActionRejectNoteRequired}})
UpdateData(instanceNoteCode,{{instanceNote.Code}});DownloadData(instanceNoteFile)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataform\contentInclude.html
UpdateDataField(contentDefinition,ShowSave,true);UpdateDataField(contentDefinition,ShowReload,true)
UpdateDataField(contentDefinition,ActionSave,{{contentButtonSaveAction}});UpdateDataField(contentDefinition,ActionCancel,{{contentButtonCancelAction}});UpdateDataField(contentDefinition,ActionReload,{{contentButtonReloadAction}})
UpdateDataField(contentDefinition,ValidationSave,mandatoryFields)
UpdateData(dataFormRow,{{dataFormRowBeforeAdd}});UpdateDataField(contentDefinition,ShowCancel,false)
IF({{dataFormCodeStatic}}!=,UpdateData(dataFormCode,{{dataFormCodeStatic}}));CloseWindow()
IF({{sourceSystemParameters.instancecode}},UpdateData(instanceCode,{{sourceSystemParameters.instancecode}}))
ShowWindow(Loading);ReloadData(dataFormItems,false);CloseWindow(windows);
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeNext}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodePrevious}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeFirst}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeLast}});CloseWindow();
ShowWindow(Confirm,[Message],{{text.DeleteMessageQuestion}},[Yes],{{dataFormRowRemoveAction}})
ShowWindow(Loading);UpdateData(dataFormRowRemove,{{dataFormRow}});PostDataItem(dataFormRowRemove,);UpdateData(dataFormRowDeleted,CreateGuid(),false);IF({{dataFormRow.CodeNext}},UpdateData(dataFormRowCode,{{dataFormRow.CodeNext}}),IF({{dataFormRow.CodePrevious}},UpdateData(dataFormRowCode,{{dataFormRow.CodePrevious}})));CloseWindow()
UpdateData(dataFormRowBeforeAdd,{{dataFormRow}});UpdateData(dataFormRow,{{dataFormRowEmpty}});Notify(dataFormRow);UpdateDataField(contentDefinition,ShowCancel,true);
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataform\contentInstanceInclude.html
ShowWindow(Loading);ClearSector(content);UpdateUrl(~/);CloseWindow(windows)
ShowWindow(Loading);ClearSector(content);UpdateUrl({{tab.LinkUrl}});UncheckDataField(dkTabs,Selected);CheckItemField({{tab.Selected}});SwitchSector(content,{{tab.Container}});SwitchSector(ribbon,{{tab.ContainerRibbon}});CloseWindow(windows)
DestroyContainer({{tab.ContainerRibbon}});DestroyContainer({{tab.Container}});RemoveDataItem(dkTabs,{{tab}});IF((({{tab.Selected}})&&({{dkTabs.length}}>1)),ExecuteDataItem({{headerFunctionActivateTab}},tab in dkTabs[^1]),Execute({{headerFunctionClearSector}}))
ExecuteDataItem({{headerFunctionCloseTabSelectedContext}},tab in dkTabs,{{tab.Selected}})
IF(ExecuteValidation(mandatoryFields),ShowWindow(Loading);IF({{instanceAction.Type}}=5,IF({{dataFormRow._HasChanges}},PostDataItem(dataFormRow,)));UpdateData(instanceActionExecuteRequest,{{instanceActionNote}});PostDataItem(instanceActionExecuteRequest,);Execute({{headerFunctionCloseTabSelected}}))
UpdateDataField(instanceActionNote,Required,{{instanceActionRejectNoteRequired}})
UpdateData(instanceNoteCode,{{instanceNote.Code}});DownloadData(instanceNoteFile)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataform\contentShared.html
UpdateDataField(contentDefinition,ShowSave,true);UpdateDataField(contentDefinition,ShowReload,true)
UpdateDataField(contentDefinition,ActionSave,{{contentButtonSaveAction}});UpdateDataField(contentDefinition,ActionCancel,{{contentButtonCancelAction}});UpdateDataField(contentDefinition,ActionReload,{{contentButtonReloadAction}})
UpdateDataField(contentDefinition,ValidationSave,mandatoryFields)
UpdateData(dataFormRow,{{dataFormRowBeforeAdd}});UpdateDataField(contentDefinition,ShowCancel,false)
IF({{dataFormCodeStatic}}!=,UpdateData(dataFormCode,{{dataFormCodeStatic}}));CloseWindow()
ShowWindow(Loading);ReloadData(dataFormItems,false);CloseWindow(windows);
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeNext}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodePrevious}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeFirst}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeLast}});CloseWindow();
ShowWindow(Confirm,[Message],{{text.DeleteMessageQuestion}},[Yes],{{dataFormRowRemoveAction}})
ShowWindow(Loading);UpdateData(dataFormRowRemove,{{dataFormRow}});PostDataItem(dataFormRowRemove,);UpdateData(dataFormRowDeleted,CreateGuid(),false);IF({{dataFormRow.CodeNext}},UpdateData(dataFormRowCode,{{dataFormRow.CodeNext}}),IF({{dataFormRow.CodePrevious}},UpdateData(dataFormRowCode,{{dataFormRow.CodePrevious}})));CloseWindow()
UpdateData(dataFormRowBeforeAdd,{{dataFormRow}});UpdateData(dataFormRow,{{dataFormRowEmpty}});Notify(dataFormRow);UpdateDataField(contentDefinition,ShowCancel,true);
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataform\index.html
UpdateSector(ribbon,~/app/dataform/ribbon.html,,false,false,=)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataform\panel01.html
UpdateDataField(panelDefinition,ShowSave,true);UpdateDataField(panelDefinition,ShowReload,true);UpdateDataField(panelDefinition,ShowMaximize,true);
UpdateDataField(panelDefinition,ActionSave,{{panelButtonSaveAction}});UpdateDataField(panelDefinition,ActionCancel,{{panelButtonCancelAction}});UpdateDataField(panelDefinition,ActionReload,{{panelButtonReloadAction}})
UpdateDataField(panelDefinition,ValidationSave,columnValue)
IF({{dataFormRow._HasChanges}}&&{{dataFormRowDetails._HasChanges}},Execute({{panelButtonSaveAllAction}}),IF({{dataFormRow._HasChanges}},Execute({{panelButtonSaveRowAction}}),IF({{dataFormRowDetails._HasChanges}},Execute({{panelButtonSaveRowDetailAction}}))));UpdateDataField(panelDefinition,ShowCancel,false);
ShowWindow(Loading);PostDataItem(dataFormRow);Notify(dataFormRow);UpdateData(dataFormRowCode,{{dataFormRow.Code}});CloseWindow();ShowWindow(Message,[Message],{{text.DataUpdateSuccess}});
ShowWindow(Loading);PostData(dataFormRowDetails,);ReloadData(dataFormRow);CloseWindow();ShowWindow(Message,[Message],{{text.DataUpdateSuccess}});
ShowWindow(Loading);PostData(dataFormRowDetails,);PostDataItem(dataFormRow,);ReloadData(dataFormRow);CloseWindow();ShowWindow(Message,[Message],{{text.DataUpdateSuccess}});
UpdateData(dataFormRow,{{dataFormRowBeforeAdd}});UpdateDataField(panelDefinition,ShowCancel,false);
IF({{sourceObject.TaskValue}},UpdateData(instanceCode,{{sourceObject.Code}});UpdateData(dataFormCode,{{sourceObject.TaskValue}}),UpdateData(dataFormCode,{{sourceObject.ReferenceCode}}))
ShowWindow(Loading);IF({{instanceAction.Type}}=5,IF({{dataFormRow._HasChanges}},PostDataItem(dataFormRow,));IF({{dataFormRowDetails._HasChanges}},PostData(dataFormRowDetails,)));PostDataItem(instanceActionExecuteRequest,);CloseWindow();CloseWindow();
ShowWindow(Loading);ReloadData(dataFormRow);CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeNext}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodePrevious}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeFirst}});CloseWindow();
ShowWindow(Loading);UpdateData(dataFormRowCode,{{dataFormRow.CodeLast}});CloseWindow();
ShowWindow(Confirm,[Message],{{text.DeleteMessageQuestion}},[Yes],{{dataFormRowRemoveAction}})
ShowWindow(Loading);UpdateData(dataFormRowRemove,{{dataFormRow}});PostDataItem(dataFormRowRemove,);IF({{dataFormRow.CodeNext}},UpdateData(dataFormRowCode,{{dataFormRow.CodeNext}}),IF({{dataFormRow.CodePrevious}},UpdateData(dataFormRowCode,{{dataFormRow.CodePrevious}})));CloseWindow()
UpdateData(dataFormRowBeforeAdd,{{dataFormRow}});UpdateData(dataFormRow,{{dataFormRowEmpty}});Notify(dataFormRow);UpdateDataField(panelDefinition,ShowCancel,true);
IF({{pageIndex}}>-1,IF({{navigationNotes.Current}}>1,UpdateDataField(navigationNotes,Count,{{pageInstanceNotes.PagesCount}});UpdateDataField(navigationNotes,Current,Cast({{navigationNotes.Current}}-1,number))));
IF({{pageIndex}}>-1,IF({{navigationNotes.Current}}<{{pageInstanceNotes.PagesCount}},UpdateDataField(navigationNotes,Count,{{pageInstanceNotes.PagesCount}});UpdateDataField(navigationNotes,Current,Cast({{navigationNotes.Current}}+1,number))));
IF({{pageHistoryIndex}}>-1,IF({{navigationHistory.Current}}>1,UpdateDataField(navigationHistory,Count,{{pageInstanceHistory.PagesCount}});UpdateDataField(navigationHistory,Current,Cast({{navigationHistory.Current}}-1,number))));
IF({{pageHistoryIndex}}>-1,IF({{navigationHistory.Current}}<{{pageInstanceHistory.PagesCount}},UpdateDataField(navigationHistory,Count,{{pageInstanceHistory.PagesCount}});UpdateDataField(navigationHistory,Current,Cast({{navigationHistory.Current}}+1,number))));
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataform\ribbon.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataform\viewSector.html
IF({{systemClipboardObject.ContentCode}}!=,UpdateData(dataFormObject,{{systemClipboardObject.ContentCode}}),UpdateData(dataFormObject,DataFormDynamic_{{systemClipboardObject.ReferenceCode}}))
UpdateSector(contentObject,{{dataFormUrl}},,false,false)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataload\gateway.html
SetClipboard({{panelDataLoadGatewayObject.CodeUpper}});UpdateDataField(panelGatewayObjectControllers,copy,true);CreateTimer(UpdateDataField(panelGatewayObjectControllers,copy,false),1500)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataload\panelSourceNewEdit.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\index.html
UpdateDataField(explorerObjectIsSelected,,false);UpdateSector(ribbon,~/app/explorer/ribbon.html,,false,false,=);IF({{explorerView}}=0,AddDataItem(explorerFoldersExpanded,-1);UpdateDataField(explorerFolderSelected,Code,-1);UpdateDataField(explorerFolderSelected,ReferenceCode,-1));IF({{explorerView}}=1,UpdateDataField(explorerFolderSelected,Code,-3);UpdateDataField(explorerFolderSelected,ReferenceCode,-3));IF({{explorerView}}=2,AddDataItem(explorerFoldersExpanded,-2);UpdateDataField(explorerFolderSelected,Code,-2);UpdateDataField(explorerFolderSelected,ReferenceCode,-2));IF({{explorerView}}>2,ExecuteDataItem({{explorerFoldersAddRecursive}},folder in explorerFolders));Execute({{explorerInitializeOrderBy}})
IF({{explorerFolderSelected.Code}}=-3,UpdateDataField(explorerObjectsOrderBy,,10,false);UpdateDataField(explorerObjectsOrderByASC,,false,false),UpdateDataField(explorerObjectsOrderBy,,0,false);UpdateDataField(explorerObjectsOrderByASC,,true,false));Notify(explorerFolderSelected)
IF({{explorerView}}=1,UpdateData(explorerView,0,false);UpdateData(explorerObjectsOrderBy,0,false);UpdateData(explorerObjectsOrderByASC,true,false))
ExecuteDataItem(UpdateDataField(explorerObjectSelected,,{{object}}),object in explorerObjects,{{object.Code}}={{explorerObjectSelected.Code}})
IF({{explorerObjectSelected}},UpdateDataField(explorerObjectIsSelected,,true),UpdateDataField(explorerObjectIsSelected,,false))
IF({{explorerObjectSelected.ReferenceCode}}!=,IF({{explorerObjectSelected.Type}}=ReportPowerBIEmbedded,UpdateDataField(explorerUpdateDataReportEnable,,true),UpdateDataField(explorerUpdateDataReportEnable,,false)),UpdateDataField(explorerUpdateDataReportEnable,,false))
IF(({{explorerHasPermissionToManageFolder.Data}})&&(({{explorerObjectCopy.Value}}!=)||({{explorerObjectCut.Value}}!=)),UpdateData(explorerClassObjectCanPaste,false),UpdateData(explorerClassObjectCanPaste,true))
UpdateDataField(explorerObjectSelectedProperties,canedit,false);UpdateDataField(explorerObjectSecurityOpenPermissions,canedit,false);IF({{explorerObjectSelected.Type}}!=WorkflowStarter && !ContainsDataItem({{explorerObjectsTypesForWorkflow}},{{explorerObjectSelected.Type}}) && !ContainsDataItem({{explorerObjectsTypesForSecurity}},{{explorerObjectSelected.Type}}),IF(ContainsDataItem({{explorerGlobalFeatures}},{{explorerObjectSelectedProperties.manageexplorerfeaturecode}}),IF({{explorerObjectSelected.Type}}=FactDataLoad,IF(ContainsDataItem({{explorerGlobalFeatures}},{{explorerObjectSelectedProperties.directdataaccessfeaturecode}}),UpdateDataField(explorerObjectSelectedProperties,canedit,true)),UpdateDataField(explorerObjectSelectedProperties,canedit,true))));IF(ContainsDataItem({{explorerObjectsTypesForWorkflow}},{{explorerObjectSelected.Type}}) && ContainsDataItem({{explorerGlobalFeatures}},{{explorerObjectSelectedProperties.manageworkflow}}),UpdateDataField(explorerObjectSelectedProperties,canedit,true));IF({{explorerObjectSelected.Type}}=WorkflowStarter && ContainsDataItem({{explorerGlobalFeatures}},{{explorerObjectSelectedProperties.managestarter}}),UpdateDataField(explorerObjectSelectedProperties,canedit,true));IF({{explorerObjectSelected.Type}}=Folder && {{explorerHasPermissionToManageFolder.Data}},UpdateDataField(explorerObjectSelectedProperties,canedit,true));IF(ContainsDataItem({{explorerFeaturesByUser}},{{explorerObjectSelectedProperties.adminsecurity}}) && ContainsDataItem({{explorerObjectsTypesForSecurity}},{{explorerObjectSelected.Type}}),UpdateDataField(explorerObjectSelectedProperties,canedit,true));IF(ContainsDataItem({{explorerFeaturesByUser}},{{explorerObjectSelectedProperties.managersecurity}}) && ContainsDataItem({{explorerObjectsTypesForSecurity}},{{explorerObjectSelected.Type}}),UpdateDataField(explorerObjectSecurityOpenPermissions,canedit,true));
ShowWindow(Loading);PostDataItem(explorerDragActionMove);ReloadData(explorerFolders);ReloadData(explorerObjects);CloseWindow()
ShowWindow(Loading);Execute({{explorerFunctionSearchClear}});Execute({{explorerUpdateInitialExplorerView}});IF({{explorerFolderSelected.Code}}!={{folder.Code}},UpdateDataField(explorerPreviousFolderSelected,,{{explorerFolderSelected.Code}},false);UpdateData(explorerFolderSelected,{{folder}});UpdateDataField(explorerSelected,,{{folder.Code}});IF((({{explorerFolderSelected.Code}}=-3)||({{explorerPreviousFolderSelected}}=-3)),UpdateData(explorerColumns,{{explorerRecentsCommomColumns}},false);Notify(explorerColumns),Notify(explorerFolderSelected));Notify(explorerFolders));UpdateData(explorerObjectSelected,,false);UpdateDataField(explorerObjectSelected,,);Execute({{explorerObjectIsSelectedFunction}});Execute({{explorerClassObjectCanPasteFunction}});CloseWindow()
IF(ContainsDataItem({{explorerFoldersExpanded}},{{folder.Code}}),RemoveDataItem(explorerFoldersExpanded,{{folder.Code}}),AddDataItem(explorerFoldersExpanded,{{folder.Code}}));Notify(explorerFolders)
UpdateDataField(systemClipboard,,{{explorerView}});UpdateDataField(panelDefinitionClipboard,Title,{{word.Filter}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.ConfigureColumnFilters}});UpdateDataField(panelObjectClipboard,,{{column}});ShowWindow(~/app/explorer/panelFilter.html,panel)
IF({{explorerObjectSelected.Code}}!={{object.Code}},IF({{explorerObjectSelected.Type}}!={{object.Type}},Execute({{explorerFunctionRainbowTabControlHome}}));UpdateDataField(explorerObjectSelected,,{{object}});UpdateDataField(explorerSelected,,{{object.Code}});Execute({{explorerEnableUpdateDataFunction}});Execute({{explorerObjectIsSelectedFunction}});Execute({{explorerClassObjectCanPasteFunction}});Execute({{explorerCheckGlobalFeatureFunction}}))
UncheckItemField({{object.editingName}},false);UpdateData(explorerObjectSelected,{{object}});Execute({{explorerExecuteFunctionOpen}})
IF({{explorerObjectSelected.Code}}!=,IF({{explorerObjectSelected.Type}}=Folder,Execute({{explorerExecuteFunctionOpenFolder}}),IF({{explorerObjectSelected.ReferenceCode}}=,Execute({{explorerExecuteFunctionEdit}}),Execute({{explorerExecuteFunctionOpenObject}}))))
ShowWindow(Loading);UpdateDataField(explorerFolderSelected,,{{explorerObjectSelected}});IF(!ContainsDataItem({{explorerFoldersExpanded}},{{explorerObjectSelected.Code}}),AddDataItem(explorerFoldersExpanded,{{explorerObjectSelected.Code}});Notify(explorerFolders));CloseWindow()
ShowWindow(Loading);IF({{explorerObjectSelected.Type}}=File,Execute({{explorerObjectDownloadFileFunction}});CloseWindow(),IF({{explorerObjectSelected.Type}}=WorkflowImage,Execute({{explorerObjectDownloadWorkflowImageFunction}});CloseWindow(),IF({{explorerObjectSelected.Type}}=DataLoad,UpdateDataField(panelDefinitionClipboard,Icon,pp ppExecuteDataLoad);UpdateDataField(panelDefinitionClipboard,Title,{{text.ExecuteDataLoad}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelObjectClipboard,DataLoadName,{{explorerObjectSelected.Name}});UpdateDataField(panelObjectClipboard,ObjectCode,{{explorerObjectSelected.TargetCode}});CloseWindow();ShowWindow(~/app/dataload/dataloadstructure/panels/panelExecuteDataLoad.html,panel),IF({{explorerObjectSelected.Type}}=Image,Execute({{explorerObjectDownloadImageFunction}});CloseWindow(),IF({{explorerObjectSelected.Type}}=ReportFile,DownloadData(explorerObjectReportFile);CloseWindow(),UpdateData(explorerObjectLinkUrl,~/l/explorer/{{explorerObjectSelected.Code}});UpdateDataField(explorerObjectToView,TrackExecution,{{explorerObjectSelected.TrackExecution}});IF({{explorerObjectSelected.ViewType}}=1,Execute({{explorerFunctionObjectOpenViewPanel}}),Execute({{explorerFunctionObjectOpenViewDefault}})))))))
UpdateDataField(explorerObjectToView,ObjectCode,{{explorerObjectSelected.Code}});UpdateDataField(explorerObjectToView,TargetCode,{{explorerObjectSelected.TargetCode}});IF({{explorerObjectSelected.ReferenceCode}}=,UpdateData(systemParameters,{{explorerObjectSelected.CreateData}});UpdateDataField(explorerObjectToView,Url,{{explorerObjectSelected.CreateURL}});Execute({{explorerFunctionEditObjectDefault}}),UpdateData(systemParameters,{{explorerObjectSelected.OpenData}});UpdateDataField(explorerObjectToView,Url,{{explorerObjectSelected.OpenURL}});UpdateDataField(explorerObjectToView,ReferenceCode,{{explorerObjectSelected.ReferenceCode}});UpdateDataField(explorerObjectToView,ViewType,{{explorerObjectSelected.ViewType}});UpdateData(systemClipboard,{{explorerObjectToView}});UpdateDataField(explorerTabObject,TypeImageClass,{{explorerObjectSelected.TypeImageClass}});UpdateDataField(explorerTabObject,SectorUrl,{{explorerObjectSelected.SectorUrl}});UpdateDataField(explorerTabObject,Name,{{explorerObjectSelected.Name}});UpdateDataField(explorerTabObject,LinkUrl,{{explorerObjectLinkUrl}});CreateGuid(explorerTabObject,Container);CreateGuid(explorerTabObject,ContainerRibbon);UncheckDataField(dkTabs,Selected,false);UpdateItemField({{explorerTabObject.Tick}},CreateTick());AddDataItem(dkTabs,{{explorerTabObject}});UpdateUrl({{explorerObjectLinkUrl}});UpdateSector(ribbon,~/app/shared/ribbon.html,,false,false,{{explorerTabObject.ContainerRibbon}});UpdateSector(content,{{explorerTabObject.SectorUrl}},,false,false,{{explorerTabObject.Container}}))
IF({{explorerObjectSelected.ReferenceCode}}=,UpdateDataField(explorerObjectSelected,ViewMode,false),UpdateDataField(explorerObjectSelected,ViewMode,true));UpdateDataField(explorerObjectToView,TargetCode,{{explorerObjectSelected.TargetCode}});UpdateDataField(explorerObjectToView,ObjectCode,{{explorerObjectSelected.Code}});UpdateDataField(explorerObjectToView,ReferenceCode,{{explorerObjectSelected.ReferenceCode}});UpdateData(systemClipboard,{{explorerObjectToView}});UpdateData(panelObjectClipboard,{{explorerObjectSelected}});UpdateDataField(panelDefinitionClipboard,Icon,{{explorerObjectSelected.TypeImageClass}});UpdateDataField(panelDefinitionClipboard,Title,{{explorerObjectSelected.Type}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{explorerObjectSelected.Name}});CloseWindow();UpdateUrl({{explorerObjectLinkUrl}});ShowWindow({{explorerObjectSelected.SectorUrl}},panel)
Execute({{explorerFunctionReloadObjectSelected}});IF({{explorerObjectSelected.Code}}!=,IF({{explorerObjectSelected.Type}}=Folder,Execute({{explorerExecuteRenameAction}}),IF({{explorerObjectSelected.EditType}}=1,Execute({{explorerFunctionObjectOpenEditPanel}}),ShowWindow(Loading);IF({{explorerObjectSelected.ReferenceCode}}=,UpdateData(systemParameters,{{explorerObjectSelected.CreateData}});UpdateDataField(explorerObjectToView,Url,{{explorerObjectSelected.CreateURL}}),UpdateData(systemParameters,{{explorerObjectSelected.EditData}});UpdateDataField(explorerObjectToView,Url,{{explorerObjectSelected.EditURL}}));Execute({{explorerFunctionEditObjectDefault}}))))
UpdateDataField(explorerObjectToView,ObjectCode,{{explorerObjectSelected.Code}});UpdateDataField(explorerObjectToView,TargetCode,{{explorerObjectSelected.TargetCode}});UpdateDataField(explorerObjectToView,ParentCode,{{explorerObjectSelected.ParentCode}});UpdateDataField(explorerObjectToView,Name,{{explorerObjectSelected.Name}});UpdateDataField(explorerObjectToView,Description,{{explorerObjectSelected.Description}});UpdateDataField(systemClipboard,,{{explorerObjectToView}});UpdateDataField(explorerTabObject,TypeImageClass,{{explorerObjectSelected.TypeImageClass}});UpdateDataField(explorerTabObject,SectorUrl,{{explorerObjectSelected.SectorEditUrl}});UpdateDataField(explorerTabObject,Name,{{explorerObjectSelected.Name}});CreateGuid(explorerTabObject,Container);CreateGuid(explorerTabObject,ContainerRibbon);UncheckDataField(dkTabs,Selected,false);UpdateItemField({{explorerTabObject.Tick}},CreateTick());AddDataItem(dkTabs,{{explorerTabObject}});UpdateSector(ribbon,~/app/shared/ribbon.html,,false,false,{{explorerTabObject.ContainerRibbon}});UpdateSector(content,{{explorerObjectSelected.SectorEditUrl}},,false,false,{{explorerTabObject.Container}})
UpdateData(systemParameters,{{explorerObjectSelected.EditData}});UpdateDataField(explorerObjectSelected,ViewMode,false);UpdateDataField(explorerObjectToView,TargetCode,{{explorerObjectSelected.TargetCode}});UpdateDataField(explorerObjectToView,ObjectCode,{{explorerObjectSelected.Code}});UpdateDataField(explorerObjectToView,ReferenceCode,{{explorerObjectSelected.ReferenceCode}});UpdateData(systemClipboard,{{explorerObjectToView}});UpdateData(panelObjectClipboard,{{explorerObjectSelected}});UpdateDataField(panelDefinitionClipboard,Icon,{{explorerObjectSelected.TypeImageClass}});UpdateDataField(panelDefinitionClipboard,Title,{{explorerObjectSelected.TypeName}});IF({{explorerObjectSelected.Type}}=WorkflowImage,UpdateDataField(panelObjectClipboard,editWorkflowImages,true);UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.SelectUploadImage}}),UpdateDataField(panelDefinitionClipboard,Subtitle,{{explorerObjectSelected.Name}}));IF({{explorerObjectSelected.Type}}=Image,UpdateDataField(panelObjectClipboard,editImage,true);UpdateDataField(panelDefinitionClipboard,Subtitle,{{explorerObjectSelected.Name}}));CloseWindow();ShowWindow({{explorerObjectSelected.SectorEditUrl}},panel)
IF({{explorerObjectSelected.Code}}={{object.Code}},IF(({{object.Type}}!=File)&&({{object.Type}}!=Report),LockPlumber();CheckItemField({{object.editingName}});Focus(inputExplorerObjectName)))
ShowWindow(Loading);UpdateDataField(explorerRenameObjectRequest,,{{object}});PostDataItem(explorerRenameObjectRequest,explorerRenameObjectResponse);ReloadData(explorerObjects);ReloadData(explorerFolders);UpdateDataField(explorerObjectSelected,,{{object}});CloseWindow();Focus()
UnlockPlumber();UncheckItemField({{object.editingName}})
IF(({{explorerObjectSelected.Code}}={{object.Code}}),LockPlumber();CheckItemField({{object.editingDescription}});Focus(inputExplorerObjectDescription))
ShowWindow(Loading);UpdateDataField(explorerUpdateObjectDescriptionRequest,,{{object}});PostDataItem(explorerUpdateObjectDescriptionRequest,explorerUpdateObjectDescriptionResponse);IF({{explorerUpdateObjectDescriptionResponse.Text}}!=,CloseWindow();ShowWindow(Error,[Message],{{explorerUpdateObjectDescriptionResponse.Text}},[Details],{{explorerUpdateObjectDescriptionResponse.Details}});ReloadData(explorerObjects),ReloadData(explorerFolders));CloseWindow();Focus()
UnlockPlumber();UncheckItemField({{object.editingDescription}})
IF(!{{explorerColumnsStash.length}},UpdateData(explorerColumnsStash,{{explorerColumns}}))
IF({{explorerColumnsStash.length}},UpdateData(explorerColumns,{{explorerColumnsStash}});CreateData(explorerColumnsStash))
IF({{explorerSearch.value}},Execute({{explorerFunctionColumnsSaveState}});UpdateData(explorerColumns,{{explorerSearchColumns}}),Execute({{explorerFunctionColumnsLoadState}}))
IF({{explorerSearch.value}},ShowWindow(Loading);UpdateDataField(explorerSearch,value,);Execute({{explorerFunctionColumnsLoadState}});CloseWindow())
UpdateDataField(explorerRainbowTabControl,home,true);UpdateDataField(explorerRainbowTabControl,view,false);UpdateDataField(explorerRainbowTabControl,integration,false);UpdateDataField(explorerRainbowTabControl,workflowprocess,false)
ExecuteDataItem(UpdateData(explorerObjectSelected,{{newobject}}),newobject in explorerObjects,{{newobject.Code}}={{explorerObjectSelected.Code}})
UpdateData(explorerObjectFileReferenceCode,{{explorerObjectSelected.ReferenceCode}});DownloadData(explorerObjectFile);UnloadData(explorerObjectFile)
UpdateData(explorerObjectFileReferenceCode,{{explorerObjectSelected.ReferenceCode}});DownloadData(explorerObjectWorkflowImage);UnloadData(explorerObjectWorkflowImage)
UpdateData(explorerObjectFileReferenceCode,{{explorerObjectSelected.ReferenceCode}});DownloadData(explorerObjectImage);UnloadData(explorerObjectImage)
ExecuteDataItem(IF({{folderRoot.Objects.length}}=0,UpdateData(explorerFolderSelected,{{folderRoot}},false)),folderRoot in explorerFolders,{{folderRoot.Code}}=-1)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\panelExecutions.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\panelExplorerFolders.html
ExecuteDataItem(IF({{folder.Code}}={{panelExplorerObject.Code}},UpdateItemField({{folder.Selected}},true,false);UpdateItemField({{panelExplorerFolderObject.code}},{{panelExplorerObject.Code}},false)),folder in panelExplorerHierarchyFolders,true,true,folder in folder.Objects)
ExecuteDataItem(IF({{folder.Code}}!={{panelExplorerFolderObject.code}},UpdateItemField({{folder.Selected}},false,false)),folder in panelExplorerHierarchyFolders,true,true,folder in folder.Objects);UpdateItemField({{panelExplorerFolderObject.code}},)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\panelExport.html
~/api/Explorer/Export?objectCode={{panelObjectToExport.Code}}
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\panelFilter.html
UpdateDataField(panelExplorerFilterColumnFilter,,{{panelExplorerFilterTemplate}})
IF(!{{panelExplorerFilterColumn.Filter}},Execute({{panelExplorerFilterInitialize}});IF({{panelExplorerFilterColumn.Type}}=2,UpdateDataField(panelExplorerFilterColumnFilter,ColumnType,1),IF({{panelExplorerFilterColumn.Type}}=5,UpdateDataField(panelExplorerFilterColumnFilter,ColumnType,3),IF({{panelExplorerFilterColumn.Type}}=3,UpdateDataField(panelExplorerFilterColumnFilter,ColumnType,9),IF({{panelExplorerFilterColumn.Name}}=Order,UpdateDataField(panelExplorerFilterColumnFilter,ColumnType,5),IF({{panelExplorerFilterColumn.Name}}=Author,UpdateDataField(panelExplorerFilterColumnFilter,ColumnType,8),IF({{panelExplorerFilterColumn.Name}}=ReferenceCode,UpdateDataField(panelExplorerFilterColumnFilter,ColumnType,4),IF({{panelExplorerFilterColumn.Type}}=4,IF({{panelExplorerFilterColumn.Name}}=Modified,UpdateDataField(panelExplorerFilterColumnFilter,ColumnType,2),UpdateDataField(panelExplorerFilterColumnFilter,ColumnType,10))))))))),IF({{panelExplorerFilterColumn.Filter.Filters}}!=||{{panelExplorerFilterColumn.Filter.Filters.[0]}}!=,UpdateDataField(panelExplorerFilterColumnFilter,,{{panelExplorerFilterColumn.Filter}});IF({{panelExplorerFilterColumn.Type}}=4,UpdateDataField(panelExplorerFilterDateObject,Value,{{panelExplorerFilterColumnFilter.Value}})),UpdateDataField(panelExplorerFilterColumnFilter,,{{panelExplorerFilterColumn.Filter.Filters.[0]}})))
ShowWindow(Loading);UpdateDataFieldLookup(explorerColumns,Name,{{panelExplorerFilterColumn.Name}},Filter,{{panelExplorerFilterColumnFilter}});Notify(explorerColumns);CloseWindow()
ShowWindow(Loading);UpdateDataFieldLookup(explorerColumns,Name,{{panelExplorerFilterColumn.Name}},Filter,);Notify(explorerColumns);CloseWindow()
IF({{panelExplorerFilterColumn.Type}}=4,UpdateDataField(panelExplorerFilterColumnFilter,Value,{{panelExplorerFilterDateObject.Value}}));IF({{panelExplorerFilterColumnFilter.Value}}=,Execute({{panelExplorerFilterRemoveFilter}}),Execute({{panelExplorerFilterApplyFilter}}));CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\panelHistory.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\panelIcons.html
UpdateData(panelExplorerIconSelected,{{panelExplorerObjectMapped}})
UpdateDataField(panelExplorerIconSelected,IconCustomClass,{{iconObject.IconClassName}},true)
UpdateData(panelExplorerObjectMapped,{{panelExplorerIconSelected}});PostData(panelExplorerObjectMapped);CloseWindow();Execute(UpdateDataField(panelExplorerPropertiesValues,IconCustomClass,{{systemParameters.IconCustomClass}},true),{{panelDefinitionClipboard.Sector}})
UpdateDataField(panelExplorerIconSelected,IconCustomClass,{{panelExplorerGetDefaultIcon}},true)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\panelProperties.html
UpdateData(panelExplorerPropertiesValues,{{panelObject}});UpdateData(panelExplorerPropertiesCurrentOwner,{{panelObject.AuthorCode}})
HideWindow();UpdateData(panelExplorerPropertiesPostingChanges,{{panelExplorerPropertiesValues}});PostDataItem(panelExplorerPropertiesPostingChanges,panelExplorerPropertiesPostingChangesResponse);ReloadData(explorerObjects);Notify(explorerObjects);UpdateData(explorerObjectSelected,{{panelExplorerPropertiesPostingChangesResponse}},false)
UpdateDataField(panelDefinitionClipboard,Sector,GetSector());UpdateDataField(panelDefinitionClipboard,Icon,pp ppProperties);UpdateDataField(panelDefinitionClipboard,Title,Icons,true,true);UpdateDataField(panelDefinitionClipboard,Subtitle,Icons available,true,true);UpdateData(systemParameters,{{panelExplorerPropertiesValues}});ShowWindow(~/app/explorer/panelIcons.html,panel)
UpdateDataField(panelExplorerObjectSelectedProperties,canedit,false);IF((({{panelExplorerPropertiesValues.Type}}=DataForm)||({{panelExplorerPropertiesValues.Type}}=Form)),IF(ContainsDataItem({{panelExplorerFeaturesByUser}},{{panelExplorerObjectSelectedProperties.managerformfeaturecode}}),UpdateDataField(panelExplorerObjectSelectedProperties,canedit,true)))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\ribbon.html
UnloadData(explorerUpdateDataReport);IF({{explorerUpdateDataReport}},UnloadData(explorerUpdateDataReport))
UncheckItemField({{explorerRainbowButton.new}});UpdateDataField(explorerNewObjectRequest,,{{item.Tag}});UpdateDataField(explorerNewObjectRequest,ParentCode,{{explorerFolderSelected.Code}});PostDataItem(explorerNewObjectRequest,explorerNewObjectResponse);IF({{explorerNewObjectResponse.Text}}!=,CloseWindow();ShowWindow(Error,[Message],{{explorerNewObjectResponse.Text}},[Details],{{explorerNewObjectResponse.Details}}),CheckItemField({{explorerNewObjectResponse.editingName}});AddDataItem(explorerObjects,explorerNewObjectResponse);UpdateDataField(explorerObjectSelected,,{{explorerNewObjectResponse}});CloseWindow();Focus(inputExplorerObjectName)))
UncheckItemField({{explorerRainbowButton.new}});IF({{subItem.Tag.Type}}=24,UpdateDatafield(panelObjectClipboard,ReferenceCode,);ShowWindow(~/app/cube/panelCubeApplication.html,panel),IF({{subItem.Tag.Type}}=33,UpdateData(systemParameters,{{explorerObjectSelected.CreateData}});UpdateDataField(panelDefinitionClipboard,Title,{{text.NewFile}});ShowWindow(~/app/cms/panelFile.html,panel),IF({{subItem.Tag.Type}}=39,UpdateData(systemParameters,{{explorerObjectSelected.CreateData}});UpdateDataField(panelObjectClipboard,ParentCode,{{explorerFolderSelected.Code}});UpdateDataField(panelObjectClipboard,ReferenceCode,);UpdateDataField(panelObjectClipboard,editWorkflowImages,false);UpdateDataField(panelDefinitionClipboard,Icon,pp ppImage);UpdateDataField(panelDefinitionClipboard,Title,{{text.WorkflowImage}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.SelectUploadImage}});ShowWindow(~/app/workflow/panelWorkflowImages.html,panel),IF({{subItem.Tag.Type}}=40,UpdateData(systemParameters,{{explorerObjectSelected.CreateData}});UpdateDataField(panelObjectClipboard,ParentCode,{{explorerFolderSelected.Code}});UpdateDataField(panelObjectClipboard,ReferenceCode,);UpdateDataField(panelObjectClipboard,editImage,false);UpdateDataField(panelDefinitionClipboard,Icon,pp ppImage);UpdateDataField(panelDefinitionClipboard,Title,{{word.Image}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.SelectUploadImage}});ShowWindow(~/app/cms/panelImage.html,panel),IF({{subItem.Tag.Type}}=36,UpdateDataField(panelDefinitionClipboard,Icon,pp ppUsers);UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.CreateNewUser}});UpdateDataField(panelDefinitionClipboard,Title,{{text.NewUser}});UpdateData(panelObjectClipboard,{{explorerObjectSelected.ReferenceCode}});ShowWindow(~/app/security/user/panelSecurityUserNewOrEdit.html,panel),ShowWindow(Loading);UpdateDataField(explorerNewObjectRequest,,{{subItem.Tag}});UpdateDataField(explorerNewObjectRequest,ParentCode,{{explorerFolderSelected.Code}});PostDataItem(explorerNewObjectRequest,explorerNewObjectResponse);IF({{explorerNewObjectResponse.Text}}!=,CloseWindow();ShowWindow(Error,[Message],{{explorerNewObjectResponse.Text}},[Details],{{explorerNewObjectResponse.Details}}),CheckItemField({{explorerNewObjectResponse.editingName}});AddDataItem(explorerObjects,explorerNewObjectResponse);UpdateDataField(explorerObjectSelected,,{{explorerNewObjectResponse}});CloseWindow();Focus(inputExplorerObjectName);Execute({{explorerObjectIsSelectedFunction}})))))))
UpdateDataField(panelDefinitionClipboard,Icon,pp ppChange-history);UpdateDataField(panelDefinitionClipboard,Title,{{text.ExecutionHistory}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{explorerObjectSelected.Name}});UpdateDataField(panelObjectClipboard,Code,{{explorerObjectSelected.ReferenceCode}});ShowWindow(~/app/dataload/executionhistory/panelExecutionHistory.html,panel)
ShowWindow(Delete,[Message],{{text.DeleteMessageQuestion}},[Yes],ShowWindow(Loading);UpdateDataField(explorerDeleteObjectSelected,,{{explorerObjectSelected}});PostDataItem(explorerDeleteObjectSelected,explorerDeleteObjectResponse);IF({{explorerDeleteObjectResponse.Text}}!=,CloseWindow();ShowWindow(Info,[MessageInfo],{{explorerDeleteObjectResponse.Text}},[DetailsInfo],{{explorerDeleteObjectResponse.Details}}),ReloadData(explorerFolders);ReloadData(explorerObjects);CloseWindow());UpdateDataField(explorerObjectSelected,,);UpdateDataField(explorerSelected,,);Execute({{explorerObjectIsSelectedFunction}}))
UpdateDataField(panelDefinitionClipboard,Icon,pp ppExecutions);UpdateDataField(panelDefinitionClipboard,Title,{{word.Executions}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.PanelSubtitleForExecutions}});UpdateDataField(panelObjectClipboard,,{{explorerObjectSelected}});ShowWindow(~/app/explorer/panelExecutions.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppProperties);UpdateDataField(panelDefinitionClipboard,Title,{{word.Properties}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.PanelSubtitleForProperties}});UpdateDataField(panelObjectClipboard,,{{explorerObjectSelected}});ShowWindow(~/app/explorer/panelProperties.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowUserTransfer);UpdateDataField(panelDefinitionClipboard,Title,{{text.TransferOwner}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelObjectClipboard,,{{explorerObjectSelected}});ShowWindow(~/app/security/transferowner/panelTransferOwner.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppChange-history);UpdateDataField(panelDefinitionClipboard,Title,{{text.ChangeHistory}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.PanelSubtitleForChangeHistory}});UpdateDataField(panelObjectClipboard,,{{explorerObjectSelected}});ShowWindow(~/app/explorer/panelHistory.html,panel)
IF(!{{explorerObjectSelected.ReferenceCode}},Execute({{explorerExecuteFunctionOpenObject}}),Execute({{explorerExecuteFunctionOpenPermission}}))
UpdateDataField(panelDefinitionClipboard,Icon,{{explorerObjectSelected.TypeImageClass}});UpdateDataField(panelDefinitionClipboard,Title,{{explorerObjectSelected.TypeName}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{explorerObjectSelected.Name}});UpdateDataField(panelObjectClipboard,,{{explorerObjectSelected}});IF({{explorerObjectSelected.Type}}=Group,ShowWindow(~/app/security/group/panelSecurityGroupTabs.html,panel),IF({{explorerObjectSelected.Type}}=User,ShowWindow(~/app/security/user/panelSecurityUserTabs.html,panel),IF({{explorerObjectSelected.Type}}=Role,ShowWindow(~/app/security/role/panelSecurityRoleTabs.html,panel),ShowWindow(~/app/explorer/permissions/panelPermissions.html,panel))));
UpdateDataField(panelDefinitionClipboard,Icon,pp ppExport);UpdateDataField(panelDefinitionClipboard,Title,{{word.Export}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.PanelSubtitleForExport}});UpdateDataField(panelObjectClipboard,,{{explorerObjectSelected}});ShowWindow(~/app/explorer/panelExport.html,panel)
ShowWindow(Loading);UpdateDataField(explorerNewFolderRequest,Code,{{explorerFolderSelected.Code}});PostDataItem(explorerNewFolderRequest,explorerNewFolderResponse);CheckItemField({{explorerNewFolderResponse.editingName}});AddDataItem(explorerObjects,explorerNewFolderResponse);UpdateDataField(explorerObjectSelected,,{{explorerNewFolderResponse}});Notify(explorerObjects);ReloadData(explorerFolders);CloseWindow();Focus(inputExplorerObjectName)
LockPlumber();CheckDataField(explorerObjectSelected,editingName);Notify(explorerObjects);Focus(inputExplorerObjectName)
IF({{explorerSynchronizeReportServerCanUseRESTIntegration}},Execute({{explorerExecuteFunctionSynchronizeReportsServerUX}}),Execute({{explorerExecuteFunctionSynchronizeReportsServerWF}}))
ShowWindow(Loading);UpdateDataField(systemClipboard,,{{explorerSynchronizeReportsURL.Data}});ClearSector(ribbon);ClearSector(footer);ClearSector({{tabSyncReports.Container}});UpdateSector(content,~/app/legacy/index.html,,true,true,{{tabSyncReports.Container}});UncheckDataField(dkTabs,Selected,false);UpdateItemField({{tabSyncReports.Tick}},CreateTick());AddDataItem(dkTabs,{{tabSyncReports}});CheckItemField({{tabSyncReports.Selected}});CloseWindow();
ShowWindow(~/app/report/loadingReports.html,loading);UpdateDataField(panelDefinitionClipboard,Title,{{text.ReportServer}});UpdateDataField(panelDefinitionClipboard,Subtitle,);ShowWindow(~/app/report/reportserver/panelReportServer.html,panel)
ShowWindow(~/app/report/loadingReports.html,loading);UpdateDataField(panelDefinitionClipboard,Title,{{text.SynchronizeReports}});UpdateDataField(panelDefinitionClipboard,Subtitle,);ShowWindow(~/app/report/reports/panelSynchronizeReport.html,panel)
IF({{explorerObjectSelected.Code}}!=,IF({{explorerObjectSelected.Type}}=WorkflowProcess,ShowWindow(Loading);UpdateDataField(tabWorkflowProcess,Name,{{word.Instances}});UpdateDataField(tabWorkflowProcess,TypeImageClass,pp ppWorkflowProcess);UpdateDataField(systemClipboard,,{{explorerWorkflowProcessInstancesURL.Data}});ClearSector(rainbow);ClearSector(footer);ClearSector({{tabWorkflowProcess.Container}});CreateGuid(tabWorkflowProcess,Container);CreateGuid(tabWorkflowProcess,ContainerRibbon);UpdateSector(ribbon,~/app/shared/ribbon.html,,false,false,{{tabWorkflowProcess.ContainerRibbon}});UpdateSector(content,~/app/legacy/index.html,,true,true,{{tabWorkflowProcess.Container}});UncheckDataField(dkTabs,Selected,false);UpdateItemField({{tabWorkflowProcess.Tick}},CreateTick());AddDataItem(dkTabs,{{tabWorkflowProcess}});CheckItemField({{tabWorkflowProcess.Selected}});CloseWindow(),),)
IF({{explorerObjectSelected.Code}}!=,IF({{explorerObjectSelected.Type}}=WorkflowProcess,ShowWindow(Loading);UpdateDataField(tabWorkflowProcess,Name,{{word.History}});UpdateDataField(tabWorkflowProcess,TypeImageClass,pp ppWorkflowProcess);UpdateDataField(systemClipboard,,{{explorerWorkflowProcessHistoryURL.Data}});ClearSector(rainbow);ClearSector(footer);ClearSector({{tabWorkflowProcess.Container}});CreateGuid(tabWorkflowProcess,Container);CreateGuid(tabWorkflowProcess,ContainerRibbon);UpdateSector(ribbon,~/app/shared/ribbon.html,,false,false,{{tabWorkflowProcess.ContainerRibbon}});UpdateSector(content,~/app/legacy/index.html,,true,true,{{tabWorkflowProcess.Container}});UncheckDataField(dkTabs,Selected,false);UpdateItemField({{tabWorkflowProcess.Tick}},CreateTick());AddDataItem(dkTabs,{{tabWorkflowProcess}});CheckItemField({{tabWorkflowProcess.Selected}});CloseWindow(),),)
IF({{explorerObjectSelected.Code}}!=,IF({{explorerObjectSelected.Type}}=WorkflowProcess,ShowWindow(Loading);UpdateDataField(tabWorkflowProcess,Name,{{word.Time}});UpdateDataField(tabWorkflowProcess,TypeImageClass,pp ppWorkflowProcess);UpdateDataField(systemClipboard,,{{explorerWorkflowProcessTimeURL.Data}});ClearSector(rainbow);ClearSector(footer);ClearSector({{tabWorkflowProcess.Container}});CreateGuid(tabWorkflowProcess,Container);CreateGuid(tabWorkflowProcess,ContainerRibbon);UpdateSector(ribbon,~/app/shared/ribbon.html,,false,false,{{tabWorkflowProcess.ContainerRibbon}});UpdateSector(content,~/app/legacy/index.html,,true,true,{{tabWorkflowProcess.Container}});UncheckDataField(dkTabs,Selected,false);UpdateItemField({{tabWorkflowProcess.Tick}},CreateTick());AddDataItem(dkTabs,{{tabWorkflowProcess}});CheckItemField({{tabWorkflowProcess.Selected}});CloseWindow(),),)
ShowWindow(Confirm,[Message],{{text.DuplicateMessageQuestion}},[Yes],ShowWindow(Loading);UpdateDataField(explorerDuplicateObjectRequest,,{{explorerObjectSelected}});PostDataItem(explorerDuplicateObjectRequest,explorerDuplicateObjectResponse);CheckItemField({{explorerDuplicateObjectResponse.editingName}});AddDataItem(explorerObjects,explorerDuplicateObjectResponse);UpdateDataField(explorerObjectSelected,,{{explorerDuplicateObjectResponse}});Notify(explorerObjects);ReloadData(explorerFolders);CloseWindow();Focus(inputExplorerObjectName))
ShowWindow(Loading);UpdateDataField(systemClipboard,,{{explorerFormulasExecutionURL.Data}});UpdateDataField(tabGeneric,Name,Execution);UpdateDataField(tabGeneric,TypeImageClass,pp ppFormula);ClearSector(ribbon);ClearSector(footer);ClearSector({{tabGeneric.Container}});UpdateSector(content,~/app/legacy/index.html,,true,true,{{tabGeneric.Container}});UncheckDataField(dkTabs,Selected,false);UpdateItemField({{tabGeneric.Tick}},CreateTick());AddDataItem(dkTabs,{{tabGeneric}});CheckItemField({{tabGeneric.Selected}});CloseWindow();
{ppDisableButtonManaged:({{explorerObjectSelected.Type}}=Group)||({{explorerObjectSelected.Type}}=User)||({{explorerObjectSelected.Type}}=Role)||({{explorerObjectSelected.Type}}=WorkflowImage)||({{explorerObjectSelected.Type}}=Image)||(!{{explorerHasPermissionToManageFolder.Data}})||(!{{explorerObjectIsSelected}})}
UpdateDataField(explorerNewObjectShortcutData,ParentCode,{{explorerObjectSelected.ParentCode}},false);UpdateDataField(explorerNewObjectShortcutData,Name,{{explorerObjectSelected.Name}},false);UpdateDataField(explorerNewObjectShortcutData,ReferenceCode,{{explorerObjectSelected.Code}},false)
{ppDisableButtonManaged:((!{{explorerHasPermissionToManageFolder.Data}})||(!{{explorerObjectIsSelected}})||({{explorerFolderSelected.Code}}=-3)||{{explorerObjectSelected.IsShortcut}})}
IF((({{explorerView}}=0)||({{explorerView}}=1)||({{explorerView}}=2)),UpdateDataField(explorerRainbowAssignedValue,Value,0,true),UpdateDataField(explorerRainbowAssignedValue,Value,{{explorerView}},true))
ShowWindow(Loading);UpdateDataField(explorerRainbowAssignedValue,Value,0,true);UpdateData(explorerView,0,true);CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\viewFrame.html
IF({{explorerObject.TrackExecution}},UpdateDataField(explorerObjectExecution,,{{explorerObjectExecutionCreate}}))
IF({{explorerObjectExecution.Code}}!=,UpdateDataField(explorerObjectExecutionResult,,{{explorerObjectExecutionFinish}}))
ShowWindow(Loading);PostDataItem(frameDataForm,);CloseWindow();
ShowWindow(Loading);UpdateData(systemClipboard,{{frameDataFormInstancePanel}});UpdateDataField(panelDefinitionClipboard,Title,{{frameDataFormInstancePanel.Name}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{word.[Empty]}});CloseWindow();ShowWindow(~/api/CMS/GetPanel/DataForm_{{frameDataFormInstancePanel.TaskValue}},panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\viewPanel.html
IF(({{panelExplorerObject.TrackExecution}}),UpdateDataField(panelExplorerObjectExecution,,{{panelExplorerObjectExecutionCreate}}))
IF({{panelExplorerObjectExecution.Code}}!=,UpdateDataField(panelExplorerObjectExecutionResult,,{{panelExplorerObjectExecutionFinish}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\viewPanelSmall.html
IF(({{panelExplorerObject.TrackExecution}}),UpdateDataField(panelExplorerObjectExecution,,{{panelExplorerObjectExecutionCreate}}))
IF({{panelExplorerObjectExecution.Code}}!=,UpdateDataField(panelExplorerObjectExecutionResult,,{{panelExplorerObjectExecutionFinish}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\viewSector.html
IF({{explorerObject.TrackExecution}},UpdateDataField(explorerObjectExecution,,{{explorerObjectExecutionCreate}}));UpdateData(explorerObjectInstanceCode,{{systemParameters.instancecode}})
IF({{explorerObjectExecution.Code}}!=,UpdateDataField(explorerObjectExecutionResult,,{{explorerObjectExecutionFinish}}))
UpdateSector(contentObject,{{explorerObject.Url}},,false,false)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\form\index.html
UpdateSector(ribbon,~/app/form/ribbon.html,,false,false,=)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\form\panelFormAdjust.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\form\panelFormDescription.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\form\panelFormDetails.html
UpdateData(clipboard,{{panelFormDetailsContext}});ShowWindow(~/app/form/panelFormDetailsHistory.html,panel)
UpdateItemField({{panelFormDetailsSave.Value}},{{panelFormDetails.Value}});UpdateItemField({{panelFormDetailsSave.Context}},{{panelFormDetailsContext}});PostDataItem(panelFormDetailsSave,);CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\form\panelFormDetailsHistory.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\form\ribbon.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\identity\indexData.html
UpdateDataField(loaderStatus,showMe,true);PostDataItem(identityQuery,identityResponse);Execute({{identityLogin}})
IF({{identityResponse.Data.Token}},UpdateToken({{identityResponse.Data.Token}});Execute({{functionAntiforgery}});ClearSector(content);UpdateSector(header,~/app/shared/header.html);UpdateSector(footer,~/app/shared/footer.html);UpdateSector(ribbon,~/app/shared/ribbon.html);Execute({{functionSharedStartHome}}),UpdateDataField(loaderStatus,showMe,false))
UpdateDataField(identityResponse,,);UpdateDataField(identityShowErrorDetails,showErrorDetails,false);Execute({{identityExecuteLogin}});IF(!{{identityResponse.Message}},IF({{identityPasswordExpired.Data}},IF({{identityShowPasswordChange}},Execute({{identityPasswordUpdateObjectChange}});IF(!{{identityResponse.Message}},UpdateDataField(identityQuery,Password,{{identityQuery.NewPassword}});Execute({{identityExecuteLogin}})),UpdateDataField(identityShowPasswordChange,,true)),Execute({{identityExecuteLogin}})))
UpdateItemField({{identityPasswordChange.UserLogin}},{{identityQuery.UserLogin}});UpdateItemField({{identityPasswordChange.OldPassword}},{{identityQuery.Password}});UpdateItemField({{identityPasswordChange.NewPassword}},{{identityQuery.NewPassword}});PostDataItem(identityPasswordChange,identityShowPasswordChange)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\identity\indexFields.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\integration\index.html
CreateTimer(UpdateDataField(integrationKeepAliveProperties,time,Cast({{integrationKeepAliveProperties.time}}+1,number)),{{keepAliveInterval}},true);IF({{drapo.theme}}!={{integrationKeepAliveProperties.theme}},UpdateDataField(drapo,theme,{{integrationKeepAliveProperties.theme}});PostData(drapo);ReloadPage())
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\legacy\index.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\link\cms.html
IF({{querystring.v1}},UpdateData(linkCMSCode,{{querystring.v1}}));UncheckDataField(dkTabs,Selected,false);CreateGuid(tabHome,Container);UpdateItemField({{tabHome.Tick}},CreateTick());AddDataItem(dkTabs,{{tabHome}});UpdateSector(content,~/api/CMS/GetContent/{{linkCMSCode}},,false,false,{{tabHome.Container}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\link\explorer.html
IF(({{querystring.v1}})&&({{querystring.v1}}!=filter),Execute({{linkFunctionOpenObject}}),IF({{querystring.v1}}=filter,UpdateData(linkExplorerFilterCode,{{querystring.v2}}));Execute({{linkFunctionOpenExplorer}}))
ShowWindow(Loading);UpdateDataField(linkTabExplorer,LinkUrl,{{querystring.returnUrl}});UpdateData(systemClipboard,{{linkExplorerFilterCode}});UncheckDataField(dkTabs,Selected,false);CreateGuid(linkTabExplorer,Container);CreateGuid(linkTabExplorer,ContainerRibbon);UpdateItemField({{linkTabExplorer.Tick}},CreateTick());AddDataItem(dkTabs,{{linkTabExplorer}});UpdateSector(ribbon,~/app/shared/ribbon.html,,false,false,{{linkTabExplorer.ContainerRibbon}});UpdateSector(content,~/app/explorer/index.html,,false,false,{{linkTabExplorer.Container}});CloseWindow()
UpdateDataField(linkObjectToView,TrackExecution,{{linkObject.TrackExecution}});IF({{linkObject.Type}}=Application,Execute({{linkFunctionOpenObjectViewPanel}}),IF({{linkObject.ViewType}}=1,Execute({{linkFunctionOpenObjectViewPanel}}),Execute({{linkFunctionOpenObjectViewDefault}})))
ShowWindow(Loading);UpdateDataField(linkObjectToView,ObjectCode,{{linkObject.Code}});UpdateDataField(linkObjectToView,TargetCode,{{linkObject.TargetCode}});IF({{linkObject.ReferenceCode}},UpdateData(systemParameters,{{linkObject.OpenData}});UpdateDataField(linkObjectToView,Url,{{linkObject.OpenURL}}),UpdateData(systemParameters,{{linkObject.CreateData}});UpdateDataField(linkObjectToView,Url,{{linkObject.CreateURL}});UpdateDataField(linkObjectToView,Name,{{linkObject.Name}});UpdateDataField(linkObjectToView,Description,{{linkObject.Description}}));UpdateDataField(linkObjectToView,ReferenceCode,{{linkObject.ReferenceCode}});UpdateDataField(systemClipboard,,{{linkObjectToView}});UpdateDataField(linkTabObject,TypeImageClass,{{linkObject.TypeImageClass}});UpdateDataField(linkTabObject,SectorUrl,{{linkObject.SectorUrl}});UpdateDataField(linkTabObject,Name,{{linkObject.Name}});CreateGuid(linkTabObject,Container);CreateGuid(linkTabObject,ContainerRibbon);SwitchSector(ribbon,{{linkTabObject.ContainerRibbon}});UncheckDataField(dkTabs,Selected,false);UpdateItemField({{linkTabObject.Tick}},CreateTick());AddDataItem(dkTabs,{{linkTabObject}});UpdateSector(content,{{linkTabObject.SectorUrl}},,true,true,{{linkTabObject.Container}})
IF({{linkObject.ReferenceCode}},UpdateDataField(linkObject,ViewMode,true);UpdateDataField(linkObjectToView,TargetCode,{{linkObject.TargetCode}});UpdateDataField(linkObjectToView,ObjectCode,{{linkObject.Code}});UpdateDataField(linkObjectToView,ReferenceCode,{{linkObject.ReferenceCode}});UpdateData(systemClipboard,{{linkObjectToView}});UpdateData(panelObjectClipboard,{{linkObject}});UpdateDataField(panelDefinitionClipboard,Title,{{linkObject.Name}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{word.[Empty]}});CloseWindow();ShowWindow({{linkObject.SectorUrl}},panel))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\link\instance.html
ShowWindow(Loading);UpdateDataField(linkObjectToView,ObjectCode,{{linkInstanceObject.Code}});UpdateDataField(linkObjectToView,ReferenceCode,{{linkInstanceObject.ReferenceCode}});UpdateDataField(linkObjectToView,TrackExecution,{{linkInstanceObject.TrackExecution}});UpdateDataField(linkObjectToView,Url,{{linkInstanceObject.OpenURL}});UpdateDataField(linkObjectToView,Name,{{linkInstanceObject.Name}});UpdateDataField(linkObjectToView,Description,{{linkInstanceObject.Description}});UpdateDataField(systemClipboard,,{{linkObjectToView}});UpdateData(systemParameters,{{linkInstanceObject.OpenData}});UpdateDataField(linkTabObject,TypeImageClass,{{linkInstanceObject.TypeImageClass}});UpdateDataField(linkTabObject,SectorUrl,{{linkInstanceObject.SectorUrl}});UpdateDataField(linkTabObject,Name,{{linkInstanceObject.Name}});UpdateDataField(linkTabObject,LinkUrl,~/l/instance/{{linkInstance.Code}});CreateGuid(linkTabObject,Container);UncheckDataField(dkTabs,Selected,false);UpdateItemField({{linkTabObject.Tick}},CreateTick());AddDataItem(dkTabs,{{linkTabObject}});UpdateSector(content,{{linkInstanceObject.SectorUrl}},,true,true,{{linkTabObject.Container}})
UpdateDataField(panelDefinitionClipboard,Title,{{linkInstance.TaskName}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{linkInstance.Name}});UpdateDataField(systemClipboard,,{{linkInstance}});ShowWindow(~/api/CMS/GetPanel/{{linkInstance.ContentCode}},panel)
IF({{linkInstance.TaskViewType}}=1,Execute({{linkFunctionOpenInstanceObjectPanel}}),Execute({{linkFunctionOpenInstanceObjectDefault}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\link\member.html
ShowWindow(Loading);UpdateDataField(linkTabMembers,Name,{{linkModuleMembers.Name}});UpdateDataField(linkTabMembers,TypeImageClass,{{linkModuleMembers.TypeImageClass}});UpdateDataField(linkTabMembers,LinkUrl,{{querystring.returnUrl}});UpdateData(systemClipboard,{{linkModuleMembers.Url}});CreateGuid(linkTabMembers,Container);UpdateItemField({{linkTabMembers.Tick}},CreateTick());AddDataItem(dkTabs,{{linkTabMembers}});UpdateSector(content,~/app/legacy/index.html,,true,true,{{linkTabMembers.Container}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\link\user.html
ShowWindow(Loading);UpdateDataField(linkTabUsers,Name,{{linkModuleUsers.Name}});UpdateDataField(linkTabUsers,TypeImageClass,{{linkModuleUsers.TypeImageClass}});UpdateDataField(linkTabUsers,LinkUrl,{{querystring.returnUrl}});UpdateData(systemClipboard,{{linkModuleUsers.Url}});CreateGuid(linkTabUsers,Container);UpdateItemField({{linkTabUsers.Tick}},CreateTick());AddDataItem(dkTabs,{{linkTabUsers}});UpdateSector(content,~/app/legacy/index.html,,true,true,{{linkTabUsers.Container}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\link\workflow.html
ShowWindow(Loading);UpdateDataField(linkTabProcessViewer,Name,{{linkModuleProcessViewer.Name}});UpdateDataField(linkTabProcessViewer,TypeImageClass,{{linkModuleProcessViewer.TypeImageClass}});UpdateDataField(linkTabProcessViewer,LinkUrl,{{querystring.returnUrl}});UpdateData(systemClipboard,{{linkModuleProcessViewer.Url}});CreateGuid(linkTabProcessViewer,Container);UpdateItemField({{linkTabProcessViewer.Tick}},CreateTick());AddDataItem(dkTabs,{{linkTabProcessViewer}});UpdateSector(content,~/app/legacy/index.html,,true,true,{{linkTabProcessViewer.Container}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\loadParameter\panelLoadParameterNewOrEdit.html
UpdateItemField({{panelLoadParameterObjectSave.Value}},)
UpdateDataField(panelLoadParameterObjectSave,explorerParentCode,{{systemClipboard.ParentCode}})
IF(({{panelLoadParameterObjectSave.SubType}}=3), UpdateItemField({{panelLoadParameterObjectSave.Hierarchy}},))
IF(!(({{panelLoadParameterObjectSave.Type}}=4)&&({{panelLoadParameterObjectSave.SubType}}=1)),UpdateItemField({{panelLoadParameterObjectSave.SubType}},))
IF(!(({{panelLoadParameterObjectSave.Type}}=4)&&({{panelLoadParameterObjectSave.SubType}}=1)),UpdateItemField({{panelLoadParameterObjectSave.DataMember}},false))
IF(({{panelLoadParameterObjectSave.Type}}=1), UpdateItemField({{panelLoadParameterObjectSave.Value}},{{panelLoadParameterObjectSave.DatePicker}}))
IF(({{panelLoadParameterObjectSave.Type}}=1), UpdateItemField({{panelLoadParameterObjectSave.DatePicker}},{{panelLoadParameterObjectSave.Value}}))
IF(!(({{panelLoadParameterObjectSave.Type}}!=4)||(({{panelLoadParameterObjectSave.Type}}=4)&&({{panelLoadParameterObjectSave.SubType}}=-1))), UpdateItemField({{panelLoadParameterObjectSave.Value}},{{panelLoadParameterObjectSave.MemberId}}))
IF((({{panelLoadParameterObjectSave.Type}}=4)&&({{panelLoadParameterObjectSave.SubType}}=3)), UpdateItemField({{panelLoadParameterObjectSave.Value}},{{panelLoadParameterObjectSave.Attribute}}))
Execute({{panelLoadParameterUpdateValueFromMemberId}});Execute({{panelLoadParameterSetExplorerParentCode}}); Execute({{panelLoadParameterUpdateValueFromAttribute}}); Execute({{panelLoadParameterUpdateValueDatePicker}});  Execute({{panelLoadParameterCheckDataMember}}); Execute({{panelLoadParameterClearHierarchyFunction}})
IF({{panelLoadParameterObjectClipboard.ReferenceCode}}=,UpdateDataField(panelLoadParameterObjectSave,Name,{{panelLoadParameterObjectClipboard.Name}});IF({{panelLoadParameterObjectClipboard.ApplicationCode}}!=,UpdateDataField(panelLoadParameterObjectSave,ApplicationCode,{{panelLoadParameterObjectClipboard.ApplicationCode}}),),)
IF({{panelDefinitionClipboard.BeforeCloseDelegate}}!=,Execute({{panelDefinitionClipboard.BeforeCloseDelegate}});UpdateDataField(panelDefinitionClipboard,BeforeCloseDelegate,),)
Execute({{panelLoadParameterUpdateValueToSave}});IF(ExecuteValidation(panelLoadParameterValidatorText),ShowWindow(Loading);PostDataItem(panelLoadParameterObjectSave,);Notify(explorerFolderSelected);Execute({{panelLoadParameterBeforeCloseAction}});CloseWindow();CloseWindow())
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\manager\notificationDetails.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\manager\panelNotifications.html
UpdateDataField(notificationCode,,{{notification.Code}});IF({{notificationActionDismiss}},ReloadData(notifications));
IF({{notificationActionDismissAll}},ReloadData(notifications));
UpdateData(systemClipboard,{{notification.Code}});ShowWindow(~/app/manager/notificationDetails.html,windows)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\manager\windowNotificationNew.html
UpdateData(systemClipboard,{{notificationCode}});ShowWindow(~/app/manager/notificationDetails.html,windows);Execute({{notificationClose}})
CreateTimer(UpdateData(notificationWindowClass,ppWindowShow),0)
CreateTimer(UpdateData(notificationWindowClass,ppWindowHide),5000)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\profitability\index.html
UpdateSector(ribbon,~/app/profitability/ribbon.html,,false,false,=)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\profitability\panelFilters.html
IF({{page.IsMultiSelection}},UpdateDataField(profitabilityPageMultiSelection,,{{page}}),UpdateDataField(profitabilityPagesNonMultiSelection,{{page.DimensionID}},{{page}}))
UpdateDataField(profitabilityFiltersObjectPages,,{{profitabilityFiltersObject.Pages}});ExecuteDataItem({{profitabilityFunctionPagesSelection}},page in profitabilityFiltersObjectPages);
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\profitability\panelProfitabilityNewScenario.html
UpdateData(panelProfitabilityAllPages,{{profitability.Pages}},false)
ExecuteDataItem(UpdateData(panelProfitabilityPageMultiSelection,{{page}}),page in panelProfitabilityAllPages,{{page.IsMultiSelection}})
ExecuteDataItem(UpdateDataField(profitability,Pages.{{page._Index}},{{panelProfitabilityPageMultiSelection}},false),page in panelProfitabilityAllPages,{{page.IsMultiSelection}})
UpdateDataField(panelProfitabilityPageMultiSelection,MemberDestinationUniqueID,{{profitabilityNewScenarioCopyResponse.Data}},false)
Execute({{panelProfitabilityUpdateScenarioDestinationUniqueId}});Execute({{panelProfitabilityUpdatePageMultiSelectionBackward}});Execute({{profitabilityFunctionApply}})
HideWindow();PostDataItem(profitabilityCopyScenario,profitabilityNewScenarioCopyResponse);Execute({{profitabilitySelectScenarioCreatedAction}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\profitability\ribbon.html
UpdateData(profitabilityPages,{{profitability.Pages}})
IF({{item.Value}}={{panelObjectClipboard.sourceUniqueID}},UpdateDataField(panelObjectClipboard,Name,{{item.Text}}))
IF({{item.IsMultiSelect}},UpdateDataField(profitabilityScenarioSourceItens,,{{item.Items}}))
UpdateDataField(panelObjectClipboard,sourceUniqueID,{{page.MemberSourceUniqueID}})
UpdateDataField(panelObjectClipboard,destinationUniqueID,{{page.MemberDestinationUniqueID}})
UpdateDataField(panelObjectClipboard,ApplicationCode,{{profitability.ApplicationCode}});Execute({{profitabilityPagesSetArray}});ExecuteDataItem({{profitabilityFindScenarioSourceUniqueId}},page in profitabilityPages,{{page.IsMultiSelection}});ExecuteDataItem({{profitabilityFindScenarioSourceItens}},item in profitabilityPagesItens,true,true);ExecuteDataItem({{profitabilityFindScenarioSourceName}},item in profitabilityScenarioSourceItens,true,true,child in item.Items)
UpdateDataField(panelObjectClipboard,ApplicationCode,{{profitability.ApplicationCode}});Execute({{profitabilityPagesSetArray}});ExecuteDataItem({{profitabilityFindScenarioDestinationUniqueId}},page in profitabilityPages,{{page.IsMultiSelection}});
Execute({{profitabilityGetScenario}});UpdateDataField(panelDefinitionClipboard,Icon,pp ppProfitabilityNewScenario);UpdateDataField(panelDefinitionClipboard,Title,{{text.NewScenario}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.ProfitabilityAnalysis}});ShowWindow(~/app/profitability/panelProfitabilityNewScenario.html,panel)
Execute({{profitabilityDefaultValuesEditScenario}});UpdateDataField(panelDefinitionClipboard,Icon,pp ppProfitabilityEditScenario);UpdateDataField(panelDefinitionClipboard,Title,{{text.ScenarioTypes}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.DefinePlanPeriods}});ShowWindow(~/app/cube/scenariotype/panelEditScenarioType.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\report\panelPowerBICreate.html
IF({{reportName}}!=,UpdateDataField(panelReportParameters,Name,{{reportName}});UpdateDataField(panelReportDisableName,,true),)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\report\panelTemp.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\report\powerbi.html
ToggleItemField({{reportPowerBIsettings.filters}});
ToggleItemField({{reportPowerBIsettings.bookmarks}});
UpdateDataField(reportPowerBIActions,action,print);UpdateDataField(reportPowerBIActions,action,)
UpdateDataField(reportPowerBIActions,action,fullscreen);UpdateDataField(reportPowerBIActions,action,)
UpdateDataField(reportPowerBIActions,action,reload);UpdateDataField(reportPowerBIActions,action,)
UpdateDataField(reportPowerBIActions,action,refresh);UpdateDataField(reportPowerBIActions,action,)
UpdateDataField(reportMode,mode,view);UpdateDataField(reportPowerBIActions,action,view);UpdateDataField(reportPowerBIActions,action,)
UpdateDataField(reportMode,mode,edit);UpdateDataField(reportPowerBIActions,action,edit);UpdateDataField(reportPowerBIActions,action,)
UpdateDataField(reportPowerBIActions,action,save);UpdateDataField(reportPowerBIActions,action,)
UpdateDataField(reportPanelCreateMode,mode,create);Execute({{reportFunctionCreateOrCloneClick}})
UpdateDataField(reportPanelCreateMode,mode,clone);Execute({{reportFunctionCreateOrCloneClick}})
IF({{reportQuery.view}}=create,UpdateDataField(reportShowRainbow,,false);UpdateDataField(reportName,,{{explorerObject.Name}});UpdateDataField(reportPanelCreateMode,mode,create);Execute({{reportFunctionCreateOrCloneClick}}),IF({{reportQuery.view}}=edit,UpdateDataField(reportMode,mode,edit),UpdateDataField(reportMode,mode,view)));IF((({{reportMode.mode}}!=view)||({{reportUserHasPermissionToViewRibbon}})),UpdateSector(ribbon,~/app/report/ribbon.html));UpdateDataField(reportName,,);ShowWindow(Loading);
UpdateDataField(reportMode,mode,edit);UpdateDataField(token,,{{tokenReportSaveNew}});CloseWindow();
UpdateDataField(panelDefinitionClipboard,Icon,pp ppReport);UpdateDataField(panelDefinitionClipboard,Title,{{word.Report}});IF({{reportPanelCreateMode.mode}}=create,UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.CreateReport}}),UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.SaveAs}}));ShowWindow(~/app/report/panelPowerBICreate.html,panel);
CloseWindow();UpdateDataField(reportHasErrorLoading,,true);ClearSector(ribbon);ShowWindow(Error,[Message],{{word.Error}},[Details],{{text.ReportLoadingError}});
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\report\reportViewer.html
IF({{explorerObject.TrackExecution}},UpdateDataField(explorerObjectExecution,,{{explorerObjectExecutionCreate}}));UpdateData(explorerObjectInstanceCode,{{systemParameters.instancecode}})
IF({{explorerObjectExecution.Code}}!=,Execute({{explorerObjectExecutionFinish}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\report\ribbon.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\report\windowDataSource.html
UpdateDataField(windowDefinition,Title,{{text.DataSource}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\windowImpersonate.html
UpdateDataField(windowDefinition,Title,{{text.ImpersonateUser}})
\\ Read Error: powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\shared\cookiesPolicy.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\shared\cookiesPolicy.html
UpdateDataField(windowDefinition,Title,{{text.ImpersonateUser}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\shared\header.html
ShowWindow(Loading);ClearSector(ribbon);ClearSector(content);ClearSector(footer);UpdateUrl({{tab.LinkUrl}});UncheckDataField(dkTabs,Selected);UpdateItemField({{tab.Tick}},CreateTick());CheckItemField({{tab.Selected}});SwitchSector(content,{{tab.Container}});SwitchSector(ribbon,{{tab.ContainerRibbon}});CloseWindow(windows)
DestroyContainer({{tab.ContainerRibbon}});DestroyContainer({{tab.Container}});RemoveDataItem(dkTabs,{{tab}});IF({{tab.Selected}},ClearSector(ribbon);ClearSector(content);ClearSector(footer);PushStack({{headerTabMaxTick.Tick}});ExecuteDataItem({{headerFunctionActivateTabContext}},tab in dkTabs,{{tab.Tick}}={{_stack.peek}}))
ExecuteDataItem({{headerFunctionCloseTabSelectedContext}},tab in dkTabs,{{tab.Selected}})
DestroyContainer({{tab.ContainerRibbon}});DestroyContainer({{tab.Container}});RemoveDataItem(dkTabs,{{tab}})
UpdateDataField(panelDefinitionClipboard,Icon,pp ppNotifications);UpdateDataField(panelDefinitionClipboard,Title,{{word.Notifications}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,ShowSave,false);ShowWindow(~/app/manager/panelNotifications.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppTasks);UpdateDataField(panelDefinitionClipboard,Title,{{word.Tasks}});UpdateDataField(panelDefinitionClipboard,Subtitle,);ShowWindow(~/app/workflow/panelWorkflowTasks.html,panel)
UncheckItemField({{dkLayoutMenuState.submenu}});UncheckItemField({{dkLayoutMenuState.menu}})
Execute({{headerFunctionCloseMenu}});ShowWindow(Loading);UpdateDataField(tabGeneric,Name,Insight);UpdateDataField(tabGeneric,TypeImageClass,pp ppInsight);ClearSector(ribbon);ClearSector(footer);ClearSector({{tabGeneric.Container}});CreateGuid(tabGeneric,Container);CreateGuid(tabGeneric,ContainerRibbon);UpdateSector(ribbon,~/app/shared/ribbon.html,,false,false,{{tabGeneric.ContainerRibbon}});UpdateSector(content,~/app/system/insight/index.html,,false,false,{{tabGeneric.Container}});UncheckDataField(dkTabs,Selected,false);UpdateItemField({{tabGeneric.Tick}},CreateTick());AddDataItem(dkTabs,{{tabGeneric}});CheckItemField({{tabGeneric.Selected}});CloseWindow(windows)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\shared\layout.html
IF({{authenticatorDefault}}=AzureAd,{{authenticatorAADRedirect}},IF({{authenticatorDefault}}=Auth0,{{authenticatorAuth0Redirect}},IF({{authenticatorDefault}}=saml,{{authenticatorRedirect}},{{authenticatorLogin}})))
ClearSector(header);ClearSector(ribbon);UpdateSector(content,~/app/identity/index.html)
RedirectPage(~/api/Authentication/LogoutAuthenticator)
UnloadData(plumberRequest);IF({{plumberRequest}},UpdateData(plumberRequest,))
UpdateItemField({{plumberProperties.pipename}},explorerFolders,false);UpdateItemField({{plumberProperties.recipient}},2,false);Execute({{plumberNotify}});UpdateItemField({{plumberProperties.pipename}},explorerObjects,false);UpdateItemField({{plumberProperties.recipient}},2,false);Execute({{plumberNotify}})
UnloadData(plumberIdentifyRequest);IF({{plumberIdentifyRequest}},UpdateData(plumberIdentifyRequest,))
IF(HasToken(),IF({{querystring.v0}},UpdateUrl({{querystring.returnUrl}});UpdateSector(content,~/app/link/{{querystring.v0}}.html,,false),UpdateSector(content,~/app/link/cms.html,,false)))
ShowWindow(~/app/manager/windowNotificationNew.html,notifications)
IF(!{{querystring.sdk}},IF({{functionUserConfiguration}},UnloadData(functionUserConfiguration));CreateTimer({{functionKeepAlive}},{{keepAliveInterval}},true))
IF(!{{querystring.sdk}},IF(HasToken(),PostData(keepAlive);IF({{keepAlive}}=0001-01-01T00:00:00,{{functionLogout}})))
IF(!{{drapo.view}},UpdateDataField(drapo,view,DetectView());PostData(drapo);IF({{drapo.view}}!=default,ReloadPage()))
PostDataItem(dkUserLogout,dkUserLogoutAnswer);IF({{dkUserLogoutAnswer.Data}},ClearToken();ClearSector(header);ClearSector(ribbon);ClearSector(footer);UncheckItemField({{dkLayoutMenuState.submenu}});UncheckItemField({{dkLayoutMenuState.menu}});ClearData(dkTabs);UnloadData(userName);UnloadData(headerUserInitials);UnloadData(dkLayoutMenuItems);IF(({{useLoginPage.Message}}||{{useLoginPage.Data}}),IF({{authenticatorDefault}},{{authenticatorDefaultLogout}},UpdateSector(content,~/app/identity/index.html);CloseWindow(,true)),RedirectPage(~/app/logout/AuthenticationActiveDirectoryLogout.htm)),UpdateUrl(~/);ReloadPage())
ShowWindow(~/app/workflow/panelWorkflowInstanceAction.html,panel)
IF({{dkUserToken}},UpdateToken({{dkUserToken}});Execute({{functionAntiforgery}});Execute({{functionSharedStartHome}}))
IF(!{{querystring.sdk}},IF({{querystring.header}}!=no,UpdateSector(header,~/app/shared/header.html,,false));CreateTimer({{dkStartupAction}},0))
IF({{userName}},IF({{querystring.impersonate}},IF({{dkStartupSDKImpersonate}},ReloadData(userName)));Execute({{dkStartupAction}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\shared\panel.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\shared\panelDefinitionHeader.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\shared\panelSmall.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\shared\window.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\status\index.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\system\panelParameters.html
UpdateItemField({{panelDefinition.Title}},Parameters);Execute({{panelParametersUpdateTabParameters}})
UpdateItemField({{panelParametersTabSelectedParameters}},{{panelParametersValues.Parameters}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\system\panelPreviewFeatures.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\temp\paneldropdowntree.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\temp\panelNotification.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\temp\paneltestanalysis.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\temp\paneltestswitch.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\temp\paneltestuploader.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\textboxsmart\panelSmartExpression.html
UpdateDataField(panelDefinitionClipboard,TextBoxSmartSyntax,);UpdateDataField(panelDefinitionClipboard,TextBoxSmartEditSyntax,);UpdateDataField(panelDefinitionClipboard,TextBoxSmartEditFunctionName,)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\textboxsmart\panelSmartFunction.html
UpdateDataField(panelSmartFunctionItem,,{{panelSmartFunctions.[0]}});UpdateDataField(panelSmartFunctionItem,Key,)
UpdateDataField(panelDefinitionClipboard,SectorParent,GetSector());UpdateDataField(panelDefinitionClipboard,Title,{{panelSmartFunctionItem.Name}});UpdateDataField(panelDefinitionClipboard,FunctionKey,{{panelSmartFunctionItem.FunctionKey}});UpdateDataField(panelDefinitionClipboard,ParameterKey,{{panelSmartFunctionItem.ParameterKey}});CloseWindow();ShowWindow(~/app/textboxsmart/panelSmartFunctionParameter.html,panel)
UpdateDataField(panelSmartIncAttribute,Type,Return);UpdateDataField(panelDefinitionClipboard,TextBoxSmartSyntax,{{panelSmartFunctionItem.Syntax}});Execute({{panelSmartFunctionItemResult}})
IF({{panelSmartIncAttribute.Type}}=Return,Execute({{panelSmartFunctionItemResultTypeReturn}}),Execute({{panelSmartFunctionItemResultTypeReplace}}))
Execute(UpdateDataField(panelSmartIncAttribute,Value,{{panelDefinitionClipboard.TextBoxSmartSyntax}});UpdateDataField(panelSmartIncAttribute,Type,Return),{{panelDefinitionClipboardObject.SectorParent}});Execute(UpdateDataField(textBoxSmartSyntax,Value,{{panelDefinitionClipboard.TextBoxSmartSyntax}}),{{panelDefinitionClipboard.ComponentSectorParent}})
Execute(UpdateDataField(panelSmartIncAttribute,Value,{{panelDefinitionClipboard.TextBoxSmartSyntax}},{{panelDefinitionClipboardObject.SectorParent}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\textboxsmart\panelSmartFunctionParameter.html
UpdateDataField(panelDefinitionClipboard,TextBoxSmartSyntax,);Execute({{workflowStarterParameterEditObject}});IF({{workflowStarterParameterEditObject.SyntaxValue}}!=,UpdateDataField(panelSmartIncAttribute,Value,{{workflowStarterParameterEditObject.SyntaxValue}});UpdateDataField(panelSmartIncAttribute,Type,Edit),UpdateDataField(panelSmartIncAttribute,Type,Replace))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\userconfig\panelThemeEdit.html
IF(({{panelTheme.Variables.length}}>0&&{{panelTheme.Name}}),UpdateData(panelThemeCreateOrGetObject,{{panelTheme.Variables}}),ClearData({{panelTheme.Variables}},false));UpdateItemField({{panelThemeSimplifiedVariables.[0].Show}},true)
ExecuteDataItem(AddDataItem(panelThemeApplyVariables,{{variables}}),variables in panelThemeSimplifiedVariables,true,true)
ExecuteDataItem(AddDataItem(panelThemeApplyVariables,{{variables}}),variables in panelThemeAdvancedVariables,true,true)
Execute({{panelThemeApplySimplified}});Execute({{panelThemeApplyAdvanced}});Execute({{panelThemeApplyPost}})
UpdateItemField({{panelTheme.Variables}},{{panelThemeApplyVariables}});PostData(panelTheme)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\userconfig\panelThemeView.html
UpdateDataField(panelDefinitionClipboard,Title,{{word.Options}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppProperties);ShowWindow(~/app/userconfig/panelThemeEdit.html,panel)
UpdateData(themePostChanges,{{themes}});PostDataItem(themePostChanges)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\userconfig\panelUserConfig.html
UpdateDataField(windowDefinition,Title,{{word.Configurations}})
UpdateDataField(windowDefinition,Title,{{text.ApplicationConfigTitle}})
UpdateDataField(windowDefinition,Title,{{text.ChangePassword}})
UpdateItemField({{panelPasswordChangePost.OldPassword}},{{panelPassword.OldPassword}});UpdateItemField({{panelPasswordChangePost.NewPassword}},{{panelPassword.NewPassword}});PostDataItem(panelPasswordChangePost)
ToggleItemField({{panelUserConfig.ReceiveAlertsByEmail}})
ToggleItemField({{panelUserConfig.ReceiveAlertsTasksSwitchState}})
ToggleItemField({{panelUserConfig.RuleTaskNotFullFilled}})
ToggleItemField({{panelUserConfig.InvalidScenarioRule}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\window\delete.html
confirmListObjectsFolder:{{explorerObjectSelected.Type}}=Folder,confirmListObjectsObject
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowCalendarView.html
UpdateItemField({{panelWorkflowProcessObject.CalendarSummary}},{{panelWorkflowProcessCreateCalendarTemplate.Summary}});UpdateItemField({{panelWorkflowProcessObject.CalendarDescription}},{{panelWorkflowProcessCreateCalendarTemplate.Description}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowEmailsTemplateEdit.html
IF({{panelWorkflowProcessEmail.DataTableCode}}>0,Execute({{panelWorkflowEmailCreateFunction}}))
UpdateDataField(panelWorkflowProcessEmail,Name,);UpdateDataField(panelWorkflowProcessEmail,To,);UpdateDataField(panelWorkflowProcessEmail,CC,);UpdateDataField(panelWorkflowProcessEmail,Subject,);UpdateDataField(panelWorkflowProcessEmail,Body,)
UpdateItemField({{panelWorkflowProcessEmail.Name}},{{panelWorkflowEmailDataTable.Name}});UpdateItemField({{panelWorkflowProcessEmail.To}},{{panelWorkflowEmailDataTable.To}});UpdateItemField({{panelWorkflowProcessEmail.Cc}},{{panelWorkflowEmailDataTable.CC}});UpdateItemField({{panelWorkflowProcessEmail.Subject}},{{panelWorkflowEmailDataTable.Subject}});UpdateItemField({{panelWorkflowProcessEmail.Body}},{{panelWorkflowEmailDataTable.Body}});Execute({{panelWorkflowEmailCreateFunction}})
UpdateItemField({{panelWorkflowProcessEmail.WorkflowProcessGroupCode}},{{panelWorkflowProcessObject.GroupCode}},false)
UpdateData(panelWorkflowEmailDataTableSave,{{panelWorkflowProcessEmail}});PostDataItem(panelWorkflowEmailDataTableSave);ReloadData(panelWorkflowEmailDataTables);Execute({{panelWorkflowProcessEmailCreateSet}})
UpdateItemField({{panelWorkflowProcessEmail.DataTableCode}},{{panelWorkflowEmailDataTableSave.DataTableCode}});UpdateItemField({{panelWorkflowProcessEmail.Name}},{{panelWorkflowEmailDataTableSave.NameExpression}});UpdateItemField({{panelWorkflowProcessEmail.To}},{{panelWorkflowEmailDataTableSave.ToExpression}});UpdateItemField({{panelWorkflowProcessEmail.Cc}},{{panelWorkflowEmailDataTableSave.CcExpression}});UpdateItemField({{panelWorkflowProcessEmail.Subject}},{{panelWorkflowEmailDataTableSave.SubjectExpression}});UpdateItemField({{panelWorkflowProcessEmail.Body}},{{panelWorkflowEmailDataTableSave.BodyExpression}});AddDataItem({{panelWorkflowProcessParameters}},{{panelWorkflowEmailDataTableSave.WorkflowProcessParameters.[0]}});Execute({{panelWorkflowEmailCreateFunction}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowEmailsTemplateView.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowEmailsView.html
UpdateItemField({{panelWorkflowProcessEmailIgnore.Name}},{{word.Ignore}},false);AddDataItem({{panelWorkflowEmails}},{{panelWorkflowProcessEmailIgnore}})
ExecuteDataItem(AddDataItem({{panelWorkflowEmails}},{{email}}),email in panelWorkflowProcessObject.Emails,true,true)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowImages.html
UpdateDataField(panelWorkflowImagesImageObject,ParentCode,{{panelWorkflowImagesData.ParentCode}});IF({{panelWorkflowImagesData.editWorkflowImages}},UpdateDataField(panelWorkflowImagesImageObject,Code,{{panelWorkflowImagesData.Code}});UpdateDataField(panelWorkflowImagesImageObject,ReferenceCode,{{panelWorkflowImagesData.ReferenceCode}});UpdateDataField(panelWorkflowImagesImageObject,Data,{{panelWorkflowImagesImageGet.Data}});UpdateDataField(panelWorkflowImagesImageObject,FileName,{{panelWorkflowImagesImageGet.FileName}}))
ShowWindow(Loading);PostDataItem(panelWorkflowImagesImageObject);CloseWindow();CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowInstanceAction.html
UpdateDataField(panelWorkflowInstanceActionObject,Type,{{action.Type}});UpdateDataField(panelWorkflowInstanceActionObject,Text,{{action.Text}});IF(({{action.Type}}=6&&{{panelWorkflowInstanceActionNote.Required}}),IF(ExecuteValidation(panelWorkflowInstanceValidatorNote),Execute({{panelWorkflowInstanceActionFunctionExecute}})),IF({{panelWorkflowInstanceActionNote.AttachmentName}},IF(ExecuteValidation(panelWorkflowInstanceValidatorNote),Execute({{panelWorkflowInstanceActionFunctionExecute}})),Execute({{panelWorkflowInstanceActionFunctionExecute}})))
IF({{panelWorkflowInstanceActionNote.Note}},UpdateData(panelWorkflowInstanceActionRequestExecute,{{panelWorkflowInstanceActionNote}}));PostDataItem(panelWorkflowInstanceActionRequestExecute,);HideWindow();IF({{panelWorkflowInstanceActionClipboard.CloseTabSelected}},{{headerFunctionCloseTabSelected}});CloseWindow(panel)
UpdateDataField(panelWorkflowInstanceActionObject,Code,{{panelWorkflowInstanceActionClipboard.InstanceCode}});UpdateDataField(panelDefinitionClipboard,Title,{{panelWorkflowInstanceActionInstance.Name}});UpdateDataField(panelDefinitionClipboard,SubTitle,)
UpdateDataField(panelWorkflowInstanceActionNote,Required,{{panelWorkflowInstanceActionRejectNoteRequired}});IF({{panelWorkflowInstanceActionClipboard.ExecuteValidation}},ExecuteValidation(panelWorkflowInstanceValidatorNote);Focus(note))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowNoteRead.html
UpdateData(panelNoteCode,{{panelNoteData.Code}});DownloadData(panelNoteFile)
SetClipboard({{panelNoteData.Note}});UpdateDataField(panelNoteObjectControllers,copy,true);CreateTimer(UpdateDataField(panelNoteObjectControllers,copy,false),1500)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowParameterEdit.html
IF({{panelWorkflowProcessParameter.Name.length}}=0,UpdateDataField(panelWorkflowProcessParameter,Type,2);UpdateDataField(panelWorkflowProcessParameter,Code,CreateGuid()))
ToggleItemField({{panelWorkflowProcessParameter.Internal}});IF({{panelWorkflowProcessParameter.Internal}},UpdateDataField(panelWorkflowProcessParameter,Nullable,true);UpdateDataField(panelWorkflowProcessParameter,CannotNullable,true),UpdateDataField(panelWorkflowProcessParameter,CannotNullable,false))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowParametersView.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowProperties.html
IF({{panelWorkflowProcessSystemParameters.view}}=1,UpdateDataField(panelWorkflowProcessViewEdit,CannotEdit,true),UpdateDataField(panelWorkflowProcessViewEdit,CannotEdit,false))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowResponsiblesEdit.html
UpdateData(panelWorkflowProcessDataTableResponsibleParameterReference,{{panelWorkflowProcessDataTableResponsibleParameterEmpty}},false);IF({{panelWorkflowProcessObject.DataTableResponsible}}=,UpdateDataField(panelWorkflowProcessObject,CannotEdit,true),UpdateDataField(panelWorkflowProcessObject,CannotEdit,false);UpdateItemField({{panelWorkflowProcessObject.UseDataTable}},true);{{panelWorkflowProcessDataTableResponsibleSelect}})
IF({{panelWorkflowProcessObject.DataTableResponsible}}!=,ExecuteDataItem(IF({{panelWorkflowProcessObject.DataTableResponsible}}={{datatable.Code}},UpdateItemField({{panelWorkflowProcessDataTableFound}},true)),datatable in panelWorkflowProcessDataTables,true,true,datatable in datatable.Objects),);IF({{panelWorkflowProcessDataTableFound}}=false,ExecuteDataItem(IF({{panelWorkflowProcessObject.DataTableResponsible}}={{datatable.Code}},AddDataItem({{panelWorkflowProcessDataTables}},{{datatable}});UpdateDataField(panelWorkflowProcessDataTableResponsible,,{{datatable}})),datatable in panelWorkflowProcessObject.DataTables,true,true))
IF(!{{panelWorkflowProcessObject.UseDataTable}},UpdateItemField({{panelWorkflowProcessObject.DataTableResponsible}},);{{panelWorkflowProcessResponsiblesDefault}})
ClearData(panelWorkflowProcessDataTableResponsibleParameters);UpdateItemField({{panelWorkflowProcessObject.DataTableResponsibleParameters}},{{panelWorkflowProcessDataTableResponsibleParameters}});UpdateItemField({{panelWorkflowProcessObject.GenerateRoles}},false);UpdateItemField({{panelWorkflowProcessObject.DataTableResponsibleColumnName}},);UpdateItemField({{panelWorkflowProcessObject.DataTableResponsibleColumnValue}},);UpdateItemField({{panelWorkflowProcessObject.DataTableResponsibleColumnSort}},)
ExecuteDataItem(IF({{datatable.Code}}={{panelWorkflowProcessObject.DataTableResponsible}},UpdateDataField(panelWorkflowProcessDataTableResponsible,,{{datatable}})),datatable in panelWorkflowProcessDataTables,true,true,datatable in datatable.Objects)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowResponsiblesFilterEdit.html
{{panelObjectClipboard.DataTableResponsibleParameter}}
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowResponsiblesStructureCreate.html
{{panelObjectClipboard.DataTableResponsibleParameter}}
UpdateDataField(panelWorkflowProcessDataTableParameterDefault,DataTableResponsibleColumnName,{{word.Entity}});UpdateDataField(panelWorkflowProcessDataTableResponsibleParameter,,{{panelWorkflowProcessDataTableParameterDefault}});{{panelWorkflowProcessResponsibleParametersCreateUpdate}}
UpdateDataField(panelWorkflowProcessDataTableParameterDefault,DataTableResponsibleColumnName,{{word.Entity}});UpdateDataField(panelWorkflowProcessDataTableResponsibleParameter,,{{panelWorkflowProcessDataTableParameterDefault}});{{panelWorkflowProcessResponsibleParametersCreateUpdate}}
UpdateDataField(panelWorkflowProcessDataTableParameterDefault,DataTableResponsibleColumnName,{{word.Responsible}});UpdateDataField(panelWorkflowProcessDataTableResponsibleParameter,,{{panelWorkflowProcessDataTableParameterDefault}});{{panelWorkflowProcessResponsibleParametersCreateUpdate}}
IF({{panelWorkflowProcessDataTableResponsibleCreate.CreateAutomatically}},{{panelWorkflowProcessResponsibleParameterIdentityAutomatic}};{{panelWorkflowProcessResponsibleParameterResponsibleAutomatic}},{{panelWorkflowProcessResponsibleParameterManual}})
AddDataItem({{panelWorkflowProcessResponsibleParameters}},{{panelWorkflowProcessDataTableResponsibleParameter}})
UpdateDataField(systemClipboard,DataTableResponsibleSector,GetSector())
UpdateDataField(panelWorkflowProcessPostDataTableResponsible,ExplorerParentFolderCode,{{panelWorkflowProcessObject.ExplorerParentFolderCode}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,ExplorerObjectCode,{{panelWorkflowProcessObject.ExplorerObjectCode}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,WorkflowProcessGroupCode,{{panelWorkflowProcessObject.GroupCode}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,WorkflowProcessName,{{panelWorkflowProcessObject.Name}});UpdateDataField(panelWorkflowProcessPostDataTableResponsible,WorkflowProcessDescription,{{panelWorkflowProcessObject.Description}});UpdateDataField(panelWorkflowProcessPostDataTableResponsible,DataTableName,{{panelWorkflowProcessDataTable.Name}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,DataTableDescription,{{panelWorkflowProcessDataTable.Description}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,ApplicationCode,{{panelWorkflowProcessDataTable.ApplicationCode}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,CreateParameterAutomatically,{{panelWorkflowProcessDataTableResponsibleCreate.CreateAutomatically}},false);IF(!{{panelWorkflowProcessDataTableResponsibleCreate.CreateAutomatically}},UpdateDataField(panelWorkflowProcessPostDataTableResponsible,DataTableEntityParameterCode,{{panelWorkflowProcessObject.DataTableEntityStructureCode}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,DataTableResponsibleParameterCode,{{panelWorkflowProcessObject.DataTableResponsibleStructureCode}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,DataTableResponsiblesParameterCode,{{panelWorkflowProcessObject.DataTableResponsiblesStructureCode}},false);UpdateDataField(panelWorkflowProcessPostDataTableResponsible,WorkflowProcessParameters,{{panelWorkflowProcessObject.Parameters}},false));UpdateDataField(panelWorkflowProcessPostDataTableResponsible,WorkflowProcessResponsibleParameters,{{panelWorkflowProcessResponsibleParameters}},false)
{{panelWorkflowProcessDataTableResponsiblePrepareRequest}};PostDataItem(panelWorkflowProcessPostDataTableResponsible,panelWorkflowProcessDataTableResponsibleCreateResponse);{{panelWorkflowProcessDataTableResponsibleCreateSet}}
ExecuteInstanceFunction({{panelDefinitionClipboard.WorkflowSector}},SaveResponsibleChanges,,{{panelWorkflowProcessDataTableResponsibleCreateResponse}});UpdateDataField(panelWorkflowProcessObject,Code,{{panelWorkflowProcessObjectSaved.Code}},false);UpdateDataField(panelWorkflowProcessObject,DataTableResponsible,{{panelWorkflowProcessObjectSaved.DataTableResponsible}},false);UpdateDataField(panelWorkflowProcessObject,DataTableResponsibleColumnNameCode,{{panelWorkflowProcessObjectSaved.DataTableResponsibleColumnNameCode}},false);UpdateDataField(panelWorkflowProcessObject,DataTableResponsibleColumnValueCode,{{panelWorkflowProcessObjectSaved.DataTableResponsibleColumnValueCode}},false);UpdateDataField(panelWorkflowProcessObject,DataTableResponsibleColumnSortCode,{{panelWorkflowProcessObjectSaved.DataTableResponsibleColumnSortCode}},false);UpdateDataField(panelWorkflowProcessObject,DataTableResponsibleParameters,{{panelWorkflowProcessObjectSaved.DataTableResponsibleParameters}},false);UpdateDataField(panelWorkflowProcessObject,Parameters,{{panelWorkflowProcessObjectSaved.Parameters}},false);PostData(panelWorkflowProcessObject);CloseWindow();CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowRole.html
UpdateData(panelExplorerObjectCopied,{{panelExplorerObjectData}})
ShowWindow(Loading);PostDataItem(panelRoleObjectData);CloseWindow()
IF({{panelExplorerObjectData.ReferenceCode}}=,UpdateDataField(panelRoleObjectData,Name,{{panelExplorerObjectData.Name}});UpdateDataField(panelRoleObjectData,Description,{{panelExplorerObjectData.Description}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowStarter.html
ExecuteDataItem(UpdateDataField(parameter,checkboxExpressionDefault,true),parameter in panelStarterObject.Parameters,true,true)
UpdateDataField(panelStarterObject,Name,{{panelExplorerObjectData.Name}});UpdateDataField(panelStarterObject,Description,{{panelExplorerObjectData.Description}});UpdateDataField(panelStarterSave,,{{panelStarterObject}});HideWindow();PostDataItem(panelStarterSave)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowStartInstance.html
UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.ProcessStarterStartInstance}})
UpdateData(panelWorkflowStarterInstance,{{panelWorkflowStarterObjectData}});HideWindow();PostDataItem(panelWorkflowStarterInstance)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowTaskIdentifierView.html
UpdateItemField({{panelWorkflowProcessDataTableTrigger.Code}},{{panelWorkflowProcessObject.DataTableTaskIdentifier}})
ShowWindow(Loading);UpdateItemField({{panelWorkflowProcessObject.DataTableTaskIdentifier}},{{panelWorkflowProcessDataTableCreateTaskIdentifier.Code}});ReloadData(panelWorkflowHierarchyDataTables);ExecuteDataItem(IF({{column.Name}}={{text.TaskIdentifier}},UpdateItemField({{panelWorkflowProcessObject.DataTableTaskIdentifierColumnName}},{{column.ColumnName}})),column in panelWorkflowProcessDataTableCreateTaskIdentifier.Columns,true,true);CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\panelWorkflowTransferOwnershipView.html
UpdateItemField({{panelWorkflowProcessDataTableTrigger.Code}},{{panelWorkflowProcessObject.DataTableTransferOwnership}});UpdateItemField({{panelWorkflowProcessDataTableColumnName.From}},{{word.From}});UpdateItemField({{panelWorkflowProcessDataTableColumnName.To}},{{word.To2}})
ShowWindow(Loading);UpdateItemField({{panelWorkflowProcessObject.DataTableTransferOwnership}},{{panelWorkflowProcessDataTableCreateTransferOwnership.Code}});ReloadData(panelWorkflowHierarchyDataTables);ExecuteDataItem(IF({{column.Name}}={{panelWorkflowProcessDataTableColumnName.From}},UpdateItemField({{panelWorkflowProcessObject.DataTableTransferOwnershipToColumnName}},{{column.ColumnName}}));IF({{column.Name}}={{panelWorkflowProcessDataTableColumnName.To}},UpdateItemField({{panelWorkflowProcessObject.DataTableTransferOwnershipToColumnName}},{{column.ColumnName}})),column in panelWorkflowProcessDataTableColumns,true,true);CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\process.html
UpdateSector(ribbon,~/app/workflow/ribbon.html,,false,false,=)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\ribbon.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetAudit.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormatting.html
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingNumber.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingAlignment.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingFont.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingBorder.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingBackground.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingSize.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingOrder.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingLevel.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Formatting}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRename);ShowWindow(~/app/worksheet/panelWorksheetFormattingIndentation.html,panel)
IF({{panelFormattingMapping.Value}},AddDataItem({{panelFormattingObjectClone}},{{panelFormattingMapping}});UpdateItemField({{panelFormattingObject}},{{panelFormattingObjectClone.[0].Value}});{{panelFormattingLoadAll}})
{{panelFormattingLoadNumber}};{{panelFormattingLoadAlignment}};{{panelFormattingLoadFont}};{{panelFormattingLoadBorder}};{{panelFormattingLoadBackground}};{{panelFormattingLoadSize}};{{panelFormattingLoadOrder}};{{panelFormattingLoadLevel}};{{panelFormattingLoadIndentation}}
UpdateItemField({{panelFormattingNumberEmpty.Number}},{{panelFormattingObject.Number}})
UpdateItemField({{panelFormattingAlignmentEmpty}},{{panelFormattingObject.Alignment}})
UpdateItemField({{panelFormattingFontEmpty}},{{panelFormattingObject.Font}})
UpdateItemField({{panelFormattingBorderEmpty}},{{panelFormattingObject.Border}})
UpdateItemField({{panelFormattingBackgroundEmpty}},{{panelFormattingObject.Fill}})
UpdateItemField({{panelFormattingSizeEmpty}},{{panelFormattingObject.Size}})
UpdateItemField({{panelFormattingOrderEmpty.Order}},{{panelFormattingObject.Order}})
UpdateItemField({{panelFormattingLevelEmpty.Level}},{{panelFormattingObject.Level}})
UpdateItemField({{panelFormattingIndentationEmpty.Indentation}},{{panelFormattingObject.Indentation}})
{{panelFormattingCreateNumber}};{{panelFormattingCreateAlignment}};{{panelFormattingCreateFont}};{{panelFormattingCreateBorder}};{{panelFormattingCreateBackground}};{{panelFormattingCreateSize}};{{panelFormattingCreateOrder}};{{panelFormattingCreateLevel}};{{panelFormattingCreateIndentation}};{{panelFormattingUpdateReference}}
UpdateItemField({{panelFormattingObject.Number}},{{panelFormattingNumberEmpty.Number}})
UpdateItemField({{panelFormattingObject.Alignment}},{{panelFormattingAlignmentEmpty}})
UpdateItemField({{panelFormattingObject.Font}},{{panelFormattingFontEmpty}})
UpdateItemField({{panelFormattingObject.Border}},{{panelFormattingBorderEmpty}})
UpdateItemField({{panelFormattingObject.Fill}},{{panelFormattingBackgroundEmpty}})
UpdateItemField({{panelFormattingObject.Size}},{{panelFormattingSizeEmpty}})
UpdateItemField({{panelFormattingObject.Order}},{{panelFormattingOrderEmpty.Order}})
UpdateItemField({{panelFormattingObject.Level}},{{panelFormattingLevelEmpty.Level}})
UpdateItemField({{panelFormattingObject.Indentation}},{{panelFormattingIndentationEmpty.Indentation}})
UpdateItemField({{panelFormattingMapping.Value}},{{panelFormattingObject}})
{{panelFormattingResetNumber}};{{panelFormattingResetAlignment}};{{panelFormattingResetFont}};{{panelFormattingResetBorder}};{{panelFormattingResetBackground}};{{panelFormattingResetSize}};{{panelFormattingResetOrder}};{{panelFormattingResetLevel}};{{panelFormattingResetIndentation}}
UpdateItemField({{panelFormattingObject.Number}},);UpdateItemField({{panelFormattingNumberEmpty.Number}},)
UpdateItemField({{panelFormattingObject.Alignment}},);UpdateItemField({{panelFormattingAlignmentEmpty.Horizontal}},);UpdateItemField({{panelFormattingAlignmentEmpty.Vertical}},)
UpdateItemField({{panelFormattingObject.Font}},);UpdateItemField({{panelFormattingFontEmpty.Font}},);UpdateItemField({{panelFormattingFontEmpty.Style}},);UpdateItemField({{panelFormattingFontEmpty.Size}},);UpdateItemField({{panelFormattingFontEmpty.Color}},);UpdateItemField({{panelFormattingFontEmpty.ColorText}},);UpdateItemField({{panelFormattingFontEmpty.Effects.Strikethrough}},false);UpdateItemField({{panelFormattingFontEmpty.Effects.Superscript}},false);UpdateItemField({{panelFormattingFontEmpty.Effects.Subscript}},false)
UpdateItemField({{panelFormattingObject.Border}},);UpdateItemField({{panelFormattingBorderEmpty.Top}},);UpdateItemField({{panelFormattingBorderEmpty.Left}},);UpdateItemField({{panelFormattingBorderEmpty.Right}},);UpdateItemField({{panelFormattingBorderEmpty.Bottom}},)
UpdateItemField({{panelFormattingObject.Fill}},);UpdateItemField({{panelFormattingBackgroundEmpty.BackgroundColor}},);UpdateItemField({{panelFormattingBackgroundEmpty.BackgroundText}},)
UpdateItemField({{panelFormattingObject.Size}},);UpdateItemField({{panelFormattingSizeEmpty.Width}},);UpdateItemField({{panelFormattingSizeEmpty.Height}},)
UpdateItemField({{panelFormattingObject.Order}},);UpdateItemField({{panelFormattingOrderEmpty.Order}},)
UpdateItemField({{panelFormattingObject.Level}},);UpdateItemField({{panelFormattingLevelEmpty.Level}},)
UpdateItemField({{panelFormattingObject.Indentation}},);UpdateItemField({{panelFormattingIndentationEmpty.Indentation}},)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingAlignment.html
UpdateItemField({{panelFormattingAlignmentHorizontal}},{{panelFormattingObject.Horizontal}});UpdateItemField({{panelFormattingAlignmentVertical}},{{panelFormattingObject.Vertical}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingBackground.html
UpdateItemField({{panelFormattingObject}},{{panelFormattingColor}})
IF({{panelFormattingObject.BackgroundColor}},UpdateItemField({{panelFormattingColor}},{{panelFormattingObject}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingBorder.html
AddDataItem({{panelFormattingBorderTopLine}},{{panelFormattingBorderLine}})
AddDataItem({{panelFormattingBorderBottomLine}},{{panelFormattingBorderLine}})
AddDataItem({{panelFormattingBorderLeftLine}},{{panelFormattingBorderLine}})
AddDataItem({{panelFormattingBorderRightLine}},{{panelFormattingBorderLine}})
{{panelFormattingBorderTopLineAdd}};{{panelFormattingBorderBottomLineAdd}};{{panelFormattingBorderLeftLineAdd}};{{panelFormattingBorderRightLineAdd}};
{{panelFormattingBorderTopLineClear}};{{panelFormattingBorderBottomLineClear}};{{panelFormattingBorderLeftLineClear}};{{panelFormattingBorderRightLineClear}}
UpdateItemField({{panelFormattingBorderTop}},true);UpdateItemField({{panelFormattingBorderBottom}},true);UpdateItemField({{panelFormattingBorderLeft}},true);UpdateItemField({{panelFormattingBorderRight}},true)
UpdateItemField({{panelFormattingBorderTop}},false);UpdateItemField({{panelFormattingBorderBottom}},false);UpdateItemField({{panelFormattingBorderLeft}},false);UpdateItemField({{panelFormattingBorderRight}},false);UpdateItemField({{panelFormattingBorderOutline}},false)
IF({{panelFormattingBorderTop}}&&{{panelFormattingBorderBottom}}&&{{panelFormattingBorderLeft}}&&{{panelFormattingBorderRight}},UpdateItemField({{panelFormattingBorderOutline}},true),UpdateItemField({{panelFormattingBorderOutline}},false))
IF({{panelFormattingBorderTopLine.length}}>0,UpdateItemField({{panelFormattingObject.Top}},{{panelFormattingBorderTopLine.[0]}}),UpdateItemField({{panelFormattingObject.Top}},))
IF({{panelFormattingBorderBottomLine.length}}>0,UpdateItemField({{panelFormattingObject.Bottom}},{{panelFormattingBorderBottomLine.[0]}}),UpdateItemField({{panelFormattingObject.Bottom}},))
IF({{panelFormattingBorderLeftLine.length}}>0,UpdateItemField({{panelFormattingObject.Left}},{{panelFormattingBorderLeftLine.[0]}}),UpdateItemField({{panelFormattingObject.Left}},))
IF({{panelFormattingBorderRightLine.length}}>0,UpdateItemField({{panelFormattingObject.Right}},{{panelFormattingBorderRightLine.[0]}}),UpdateItemField({{panelFormattingObject.Right}},))
{{panelFormattingBorderTopPost}};{{panelFormattingBorderBottomPost}};{{panelFormattingBorderLeftPost}};{{panelFormattingBorderRightPost}}
IF({{panelFormattingObject.Top}},AddDataItem({{panelFormattingBorderTopLine}},{{panelFormattingObject.Top}});UpdateItemField({{panelFormattingBorderTop}},true))
IF({{panelFormattingObject.Bottom}},AddDataItem({{panelFormattingBorderBottomLine}},{{panelFormattingObject.Bottom}});UpdateItemField({{panelFormattingBorderBottom}},true))
IF({{panelFormattingObject.Left}},AddDataItem({{panelFormattingBorderLeftLine}},{{panelFormattingObject.Left}});UpdateItemField({{panelFormattingBorderLeft}},true))
IF({{panelFormattingObject.Right}},AddDataItem({{panelFormattingBorderRightLine}},{{panelFormattingObject.Right}});UpdateItemField({{panelFormattingBorderRight}},true))
{{panelFormattingBorderTopEdit}};{{panelFormattingBorderBottomEdit}};{{panelFormattingBorderLeftEdit}};{{panelFormattingBorderRightEdit}};{{panelFormattingBorderLineCheckEnableAll}}
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingFont.html
UpdateItemField({{panelFormattingObject}},{{panelFormattingFont}})
UpdateItemField({{panelFormattingObject.Effects}},{{panelFormattingEffect}})
{{panelFormattingFontAdd}};{{panelFormattingEffectAdd}}
UpdateItemField({{panelFormattingFont}},{{panelFormattingObject}});IF(({{panelFormattingObject.Effects.Strikethrough}})||({{panelFormattingObject.Effects.Superscript}})||({{panelFormattingObject.Effects.Subscript}}),UpdateItemField({{panelFormattingEffect}},{{panelFormattingObject.Effects}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingIndentation.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingLevel.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingNumber.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingOrder.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetFormattingSize.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\worksheet\panelWorksheetProperties.html
PostData(panelWorksheetMapping);HideWindow();IF({{panelWorksheetProperties.isnew}},Execute({{worksheetFunctionSave}}))
IF(!{{panelWorksheetMapping.Name}},UpdateDataField(panelWorksheetProperties,isnew,true))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\grouplistview\panelGroupNewEdit.html
{{panelObjectClipboard.codeGroupsSelectedGroupClipboard}}
UpdateData(panelGroupNewEditListGroupsBackup,{{panelGroupNewEditListGroups}})
UpdateDataFieldLookup(panelGroupNewEditListGroups,Code,{{groupSelected}},Selected,true,false)
RemoveDataItem(panelDataSelection,{{groupSelected}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\grouplistview\panelGroupView.html
{{panelObjectClipboard.codeGroupsSelectedGroupClipboard}}
UpdateData(panelGroupNewEditListGroupsBackup,{{panelGroupNewEditListGroups}})
UpdateDataFieldLookup(panelGroupNewEditListGroups,Code,{{groupSelected}},Selected,true,false)
RemoveDataItem(panelDataSelection,{{groupSelected}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\membergrid\panelMemberSelection.html
UpdateDataField(panelMemberSelectedObject,Id,{{selected.Id}});UpdateDataField(panelMemberSelectedObject,Name,{{selected.Name}});UpdateDataField(panelMemberSelectedObject,AggregationCode,{{selected.AggregationCode}});UpdateDataField(panelMemberSelectedObject,AggregationName,{{selected.AggregationName}});AddDataItem(panelMemberSelectedList,{{panelMemberSelectedObject}})
IF({{panelExplorerObjectData.AttributesView}}!=,UpdateDataField(panelMemberSelectionTab,AttributesView,{{panelExplorerObjectData.AttributesView}}),);IF({{panelObjectClipboard.singlemember}},UpdateDataField(panelMemberAggregationType,Type,2,false))
IF({{panelObjectClipboard.ObjectType}}=CubeContext,UpdateDataField(panelMemberAggregationType,Type,2);IF({{panelMemberSelectedList.length}}=1,UpdateDataField(panelMemberSelectionAdd,Allow,false);UpdateDataField(panelObjectClipboard,ClearSelectedMembers,false),UpdateDataField(panelMemberSelectionAdd,Allow,true);UpdateDataField(panelObjectClipboard,ClearSelectedMembers,true)),)
UpdateData(panelMemberSelectedList,{{panelObjectClipboardCubeDimensions.DimensionMembersDescription}});UpdateDataField(panelMemberSelectedList,DimensionId,{{panelObjectClipboard.FormFilter.DimensionId}});Execute({{panelMemberSelectionRemoveMember}})
UpdateDataField(panelDefinitionClipboard,Icon,{{panelExplorerObjectData.TypeImageClass}});UpdateDataField(panelDefinitionClipboard,Title,{{panelExplorerObjectData.TypeName}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{panelExplorerObjectData.Name}});UpdateDataField(panelDefinitionClipboard,SectorFriend,GetSector());UpdateDataField(panelObjectClipboard,formfilterReference,CreateReference({{panelMemberSelectionFormFilter}}));ShowWindow(~/app/components/membergrid/panelMemberSelectionMembersTabAdd.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\objectlistbox\panelObjectNewEdit.html
{{panelObjectClipboard.codeObjectsSelectedObjectClipboard}}
UpdateData(panelObjectNewEditListObjectsBackup,{{panelObjectNewEditListObjects}})
UpdateDataFieldLookup(panelObjectNewEditListObjects,Code,{{objectSelected}},Selected,true,false)
RemoveDataItem(panelDataSelection,{{objectSelected}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\objectlistbox\panelObjectView.html
{{panelObjectClipboard.codeObjectsSelectedObjectClipboard}}
UpdateData(panelObjectNewEditListObjectsBackup,{{panelObjectNewEditListObjects}})
UpdateDataFieldLookup(panelObjectNewEditListObjects,Code,{{objectSelected}},Selected,true,false)
RemoveDataItem(panelDataSelection,{{objectSelected}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\objectpermissionlistbox\panelObjectPermissionListBoxNewEdit.html
{{panelObjectClipboard.codeObjectsSelectedObjectClipboard}}
UpdateData(panelObjectPermissionListBoxNewEditListObjectsBackup,{{panelObjectPermissionListBoxNewEditListObjects}})
UpdateDataFieldLookup(panelObjectPermissionListBoxNewEditListObjects,Code,{{objectSelected.ObjectCode}},Selected,true,false);UpdateDataFieldLookup(panelObjectPermissionListBoxNewEditListObjects,Code,{{objectSelected.ObjectCode}},PermissionType,{{objectSelected.PermissionType}},false);
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\objectpermissionlistbox\panelObjectPermissionListBoxView.html
{{panelObjectClipboard.allObjectsSelectedClipboard}}
UpdateData(panelObjectPermissionListBoxViewSelectedTypePermissionsBackup,{{panelObjectPermissionListBoxViewSelectedTypePermissions}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\rolelistbox\panelRoleNewEdit.html
{{panelObjectClipboard.codeRolesSelectedRoleClipboard}}
UpdateData(panelRoleNewEditListRolesBackup,{{panelRoleNewEditListRoles}})
UpdateDataFieldLookup(panelRoleNewEditListRoles,Code,{{roleSelected}},Selected,true,false)
RemoveDataItem(panelDataSelection,{{roleSelected}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\rolelistbox\panelRoleView.html
{{panelObjectClipboard.codeRolesSelectedRoleClipboard}}
UpdateData(panelRoleNewEditListRolesBackup,{{panelRoleNewEditListRoles}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\textboxsmart\panelSmartInc.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\userlistview\panelUserNewEdit.html
{{panelObjectClipboard.codeUsersSelectedUserClipboard}}
UpdateData(panelUserNewEditListUsersBackup,{{panelUserNewEditListUsers}})
UpdateDataFieldLookup(panelUserNewEditListUsers,UserCode,{{userSelected}},Selected,true,false)
RemoveDataItem(panelDataSelection,{{userSelected}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\components\userlistview\panelUserView.html
{{panelObjectClipboard.codeUsersSelectedUserClipboard}}
UpdateData(panelUserNewEditListUsersBackup,{{panelUserNewEditListUsers}})
UpdateDataFieldLookup(panelUserNewEditListUsers,UserCode,{{userSelected}},Selected,true,false)
RemoveDataItem(panelDataSelection,{{userSelected}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\application\panelApplicationProfileUser.html
{{panelObjectClipboard.codeItensSelectedItensClipboard}}
AddDataItem(panelApplicationProfileUserDataSelection,{{panelApplicationProfileUserNewObject}})
UpdateData(panelApplicationProfileUserAllApplicationsBackup,{{panelApplicationProfileUserAllApplications}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\modelhistory\panelModelHistory.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppChange-history);UpdateDataField(panelDefinitionClipboard,Title,{{text.ModelHistory}});UpdateDataField(panelDefinitionClipboard,Subtitle,);
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\scenariotype\panelAuditScenarioType.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\cube\scenariotype\panelEditScenarioType.html
IF(({{__browser.Height}} < 800),UpdateDataField(panelEditScenarioTypeShowListFilter,state,false))
UpdateItemField({{item.selection}},{{panelEditScenarioTypeItemsAllSelected}},false)
ExecuteDataItem({{functionPanelEditScenarioTypeSelectItem}},item in panelEditScenarioTypeStates.ScenariosState,true,true);Notify(panelEditScenarioTypeStates)
ExecuteDataItem(UpdateItemField({{item.TypeCode}},{{panelEditScenarioTypeSelectedGlobalKey.selected}},false),item in panelEditScenarioTypeStates.ScenariosState,{{item.selection}},true);Notify(panelEditScenarioTypeStates)
IF({{panelEditScenarioTypeClipboard.destinationUniqueID}}!=,UpdateDataField(panelEditScenarioTypeSelection,application,{{panelEditScenarioTypeClipboard.ApplicationCode}});ToggleData({{panelEditScenarioTypeSelectionScenario}},{{panelEditScenarioTypeClipboard.destinationUniqueID}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataload\dataloadstructure\windowDataLoad.html
IF({{windowDataLoadEdit.Code}}!=0,UpdateDataField(windowDataLoadFileCode,,{{windowDataLoadEdit.Configuration.FileCode}});UpdateItemField({{windowDataLoadFilePreviewCSVObject.Content}},{{windowDataLoadFilePreviewGetFile.Value}});UpdateItemField({{windowDataLoadFilePreviewCSVObject.Name}},{{windowDataLoadFilePreviewGetFile.Text}});UpdateDataField(windowDataLoadMappingArrayDataFormColumns,,{{windowDataLoadEdit.Configuration.MappingColumns}});ExecuteDataItem(AddDataItem(windowDataLoadMappingArrayDataFormCodes,{{dataformcode.DataFormCode}}),dataformcode in windowDataLoadEdit.Configuration.MappingColumns);UpdateDataField(windowDataLoadDestinationObject,application,{{windowDataLoadEdit.Configuration.ApplicationCode}});UpdateDataField(windowDataLoadDestinationMapping,,{{windowDataLoadEdit.Configuration.DestinationMapping}});ExecuteDataItem(UpdateDataFieldLookup(windowDataLoadDestinationMapping,DestinationCode,{{dimension.Key}},DestinationValue,{{dimension.Value}}),dimension in windowDataLoadDestinationDimension);ExecuteDataItem(AddDataItem(windowDataLoadDestinationDataSourceCode,{{destination._Index}});AddDataItem(windowDataLoadDestinationOptionCode,{{destination._Index}});,destination in windowDataLoadDestinationMapping);UpdateData(windowDataLoadDestinationDataSourceLenght,{{windowDataLoadDestinationMapping.length}}),)
UpdateDataField(windowDataLoadDestinationObject,scopedeletechecked,false);UpdateDataField(windowDataLoadObjectPostSave,Append,{{windowDataLoadEdit.Configuration.Append}});UpdateDataField(windowDataLoadObjectPostSave,Online,{{windowDataLoadEdit.Configuration.Online}});UpdateDataField(windowDataLoadObjectPostSave,ExecuteOnSave,{{windowDataLoadEdit.Configuration.ExecuteOnSave}});UpdateDataField(windowDataLoadDestinationDataSourceOptionDefaultValueForValue,Value,{{word.File}});AddDataItem(windowDataLoadDestinationDataSourceOptionForValue,windowDataLoadDestinationDataSourceOptionDefaultValueForValue);UpdateDataField(windowDataLoadMappingObjectDataForm,validationmapping,true);
ShowWindow(Loading);PostDataItem(windowDataLoadFilePreviewCSVObject,windowDataLoadFileCode);CloseWindow()
UpdateDataField(panelDefinitionClipboard,Icon,pp ppProperties);UpdateDataField(panelDefinitionClipboard,Title,{{text.ConfigureCSV}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{text.ConfigureYourFile}});UpdateDataField(panelObjectClipboard,configurations,CreateReference({{windowDataLoadFilePreviewTableProperties}}));ShowWindow(~/app/dataload/dataloadstructure/panels/panelDataLoadFilePreviewConfigure.html,panel)
updateDataField(windowDataLoadMappingObjectDataForm,validationmapping,false);ExecuteDataItem(IF({{mapping.Source.Key}}!=,updateDataField(windowDataLoadMappingObjectDataForm,validationmapping,true)),mapping in windowDataLoadMappingDataFormColumn.MappingColumns,true,true)
UnloadData(windowDataLoadDestinationDataSourceFile);UpdateItemField({{windowDataLoadDestinationDataSourceFileBody.FileCode}},{{windowDataLoadFileCode}});UpdateItemField({{windowDataLoadDestinationDataSourceFileBody.FileProperties}},{{windowDataLoadFilePreviewTableProperties}});UpdateItemField({{windowDataLoadDestinationDataSourceFileBody.DataFormCodeCollection}},{{windowDataLoadMappingArrayDataFormCodes}})
UpdateDataField(windowDataLoadDestinationObject,scopedeletechecked,false);ExecuteDataItem(IF({{destination.SourceType}}=0,IF({{destination.ScopeDelete.Members.length}}<=0,UpdateDataField(windowDataLoadDestinationObject,scopedeletechecked,true,false);UpdateItemField({{destination.validationscopedelete}},true),UpdateItemField({{destination.validationscopedelete}},false))),destination in windowDataLoadDestinationMapping,{{destination.UseScopeDelete}}=true,true);Notify(windowDataLoadDestinationObject);Notify(windowDataLoadDestinationMapping);Execute({{windowDataLoadActionSaveValid}})
IF({{windowDataLoadDestinationObject.scopedeletechecked}}=false,ShowWindow(Loading);UpdateDataField(windowDataLoadObjectPostSave,ApplicationCode,{{windowDataLoadDestinationObject.application}});UpdateDataField(windowDataLoadObjectPostSave,FileCode,{{windowDataLoadFileCode}});UpdateDataField(windowDataLoadObjectPostSave,CSV,{{windowDataLoadFilePreviewTableProperties}});UpdateDataField(windowDataLoadObjectPostSave,MappingColumns,{{windowDataLoadMappingArrayDataFormColumns}});;UpdateDataField(windowDataLoadObjectPostSave,DestinationMapping,{{windowDataLoadDestinationMapping}});UpdateDataField(windowDataLoadSaveToCube,Configuration,{{windowDataLoadObjectPostSave}});UpdateDataField(windowDataLoadSaveToCube,Code,{{windowDataLoadEdit.Code}});PostDataItem(windowDataLoadSaveToCube);CloseWindow();IF({{windowDataLoadObjectPostSave.ExecuteOnSave}},UpdateDataField(panelDefinitionClipboard,Icon,pp ppExecuteDataLoad);UpdateDataField(panelDefinitionClipboard,Title,{{text.ExecuteDataLoad}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelObjectClipboard,ObjectCode,{{windowDataLoadClipboard.ObjectCode}});Execute({{headerFunctionCloseTabSelected}},header);ShowWindow(~/app/dataload/dataloadstructure/panels/panelExecuteDataLoad.html,panel),Execute({{headerFunctionCloseTabSelected}},header)))
ClearData(windowDataLoadDestinationMapping);ExecuteDataItem(UpdateDataField(windowDataLoadObjectDestinationMapping,ApplicationCode,{{windowDataLoadDestinationObject.application}});UpdateDataField(windowDataLoadObjectDestinationMapping,DestinationCode,{{dimension.Key}});UpdateDataField(windowDataLoadObjectDestinationMapping,DestinationValue,{{dimension.Value}});AddDataItem(windowDataLoadDestinationMapping,{{windowDataLoadObjectDestinationMapping}}),dimension in windowDataLoadDestinationDimension);
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataload\executionhistory\panelExecutionHistory.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppChange-history);UpdateDataField(panelDefinitionClipboard,Title,{{text.ExecutionHistory}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{panelDefinitionClipboard.Subtitle}});UpdateDataField(panelObjectClipboard,executionHistoryInfo,CreateReference({{history}}));ShowWindow(~/app/dataload/executionhistory/panelExecutionHistoryInfo.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataload\executionhistory\panelExecutionHistoryInfo.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataload\dataloadstructure\panels\panelDataLoadFilePreviewConfigure.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\dataload\dataloadstructure\panels\panelExecuteDataLoad.html
UpdateDataField(panelExecuteDataLoadRun,ExplorerObjectCode,{{panelObjectClipboard.ObjectCode}});UpdateDataField(panelExecuteDataLoadRun,ParameterValuesChanged,{{panelExecuteParametersUpdateValue}});UpdateDataField(panelExecuteDataLoadRun,FileCode,{{panelExecuteDataLoadFileCode}});PostDataItem(panelExecuteDataLoadRun,panelExecuteDataLoadRunResponse)
UpdateDataField(panelExecuteDataLoadFileCode,,{{panelExecuteDataLoadGetExecuteProperties.FileCode}});UpdateDataField(panelExecuteDataLoadFilePreviewCSVObject,Code,{{panelExecuteDataLoadGetData.Configuration.FileCode}});UpdateDataField(panelExecuteDataLoadFilePreviewCSVObject,ObjectCode,{{panelObjectClipboard.ObjectCode}});UpdateItemField({{panelExecuteDataLoadFilePreviewCSVObject.Content}},{{panelExecuteDataloadGetFile.Value}});UpdateItemField({{panelExecuteDataLoadFilePreviewCSVObject.Name}},{{panelExecuteDataloadGetFile.Text}});UpdateData(panelExecuteParameterCollection,{{panelExecuteDataLoadGetExecuteProperties.Parameters}})
ShowWindow(Loading);PostDataItem(panelExecuteDataLoadFilePreviewCSVObject,panelExecuteDataLoadFileCode);CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\explorer\permissions\panelPermissions.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\logs\administration\index.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppPanelConfiguration);UpdateDataField(panelDefinitionClipboard,Title,{{text.LogAdministration}});UpdateDataField(panelObjectClipboard,,{{log}});ShowWindow(~/app/logs/administration/panelLogAdministration.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\logs\administration\panelLogAdministration.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\manager\license\panelLicenseManager.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppLicenseManager);UpdateDataField(panelDefinitionClipboard,Title,{{text.LicenseManager}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{word.Explorer}});UpdateDataField(panelObjectClipboard,IsUpdate,false);UpdateDataField(panelObjectClipboard,LicenseManagerInfo,{{license}});ShowWindow(~/app/manager/license/panelLicenseManagerExplorer.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppLicenseManager);UpdateDataField(panelDefinitionClipboard,Title,{{text.LicenseManager}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{word.Update}});UpdateDataField(panelObjectClipboard,IsUpdate,true);UpdateDataField(panelObjectClipboard,LicenseManagerInfo,);UpdateDataField(panelDefinitionClipboard,SectorParent,GetSector());ShowWindow(~/app/manager/license/panelLicenseManagerExplorer.html,panel)
ShowWindow(Loading);UnloadData(panelLicenseManagerSyncFunction);Execute({{panelLicenseManagerSyncFunction}});ReloadData(panelLicenseManagerList);CloseWindow(windows)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\manager\license\panelLicenseManagerExplorer.html
UnloadData(panelLicenseManagerExplorerDownload);DownloadData(panelLicenseManagerExplorerDownload)
IF({{panelLicenseManagerExplorerInfo.Content.length}}>0,UpdateData(panelLicenseManagerUpdateObject,{{panelLicenseManagerExplorerInfo}}))
SetClipboard({{panelLicenseManagerExplorerInfo.LicenseManegerCopy}});UpdateDataField(panelLicenseManagerExplorerCopyLicense,copy,true);CreateTimer(UpdateDataField(panelLicenseManagerExplorerCopyLicense,copy,false),1500)
UpdateDataField(panelLicenseManagerExplorerDownloadLicense,download,true);CreateTimer(UpdateDataField(panelLicenseManagerExplorerDownloadLicense,download,false),1500);Execute({{panelLicenseManagerExplorerDownloadFunction}})
ShowWindow(Loading);UpdateDataField(panelLicenseManagerUpdateObjectSave,,{{panelLicenseManagerUpdateObject}});PostDataItem(panelLicenseManagerUpdateObjectSave);Execute({{panelLicenseManagerReloadList}},{{panelDefinitionClipboard.SectorParent}});CloseWindow();CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\report\reports\panelSynchronizeReport.html
IF({{panelSynchronizeReportExplorerFolder.Code}}>0,UpdateItemField({{panelSynchronizeReportExplorerObject.Code}},{{panelSynchronizeReportExplorerFolder.Code}});UpdateItemField({{panelSynchronizeReportExplorerObject.Name}},{{panelSynchronizeReportExplorerFolder.Name}});UpdateItemField({{panelSynchronizeReportExplorerObjectReference.Code}},{{panelSynchronizeReportExplorerFolder.Code}},false))
UpdateDataField(panelDefinitionClipboard,Title,{{word.Folders}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppClosedFolder);ShowWindow(~/app/explorer/panelExplorerFolders.html,panel)
ExecuteDataItem(IF({{panelSynchronizeReportResumeSelectAll}},UpdateItemField({{report.Selected}},true,false),UpdateItemField({{report.Selected}},false,false)),report in panelSynchronizeReportItensResume,true,true);Notify(panelSynchronizeReportItensResume)
IF({{panelSynchronizeReportResumeSelected}}=false,UpdateItemField({{panelSynchronizeReportResumeSelectAll}},false));ExecuteDataItem(IF({{report.Selected}}=false,UpdateData(panelSynchronizeReportResumeSelected,false)),report in panelSynchronizeReportItensResume,true,true);IF({{panelSynchronizeReportResumeSelected}},UpdateItemField({{panelSynchronizeReportResumeSelectAll}},true),UpdateItemField({{panelSynchronizeReportResumeSelectAll}},false))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\report\reportserver\panelReportServer.html
IF({{panelSynchronizeReportExplorerFolder.Code}}>0,UpdateItemField({{panelSynchronizeReportExplorerObject.Code}},{{panelSynchronizeReportExplorerFolder.Code}});UpdateItemField({{panelSynchronizeReportExplorerObject.Name}},{{panelSynchronizeReportExplorerFolder.Name}});UpdateItemField({{panelSynchronizeReportExplorerObjectReference.Code}},{{panelSynchronizeReportExplorerFolder.Code}},false))
UpdateDataField(panelDefinitionClipboard,Title,{{word.Folders}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppClosedFolder);ShowWindow(~/app/explorer/panelExplorerFolders.html,panel)
ExecuteDataItem(IF({{panelSynchronizeReportResumeSelectAll}},UpdateItemField({{report.Selected}},true,false),UpdateItemField({{report.Selected}},false,false)),report in panelSynchronizeReportItensResume,true,true);Notify(panelSynchronizeReportItensResume)
ExecuteDataItem(IF({{report.Selected}}=false,UpdateData(panelSynchronizeReportSelected,false)),report in panelSynchronizeReportItens,true,true)
IF({{panelSynchronizeReportResumeSelected}}=false,UpdateItemField({{panelSynchronizeReportResumeSelectAll}},false));ExecuteDataItem(IF({{report.Selected}}=false,UpdateData(panelSynchronizeReportResumeSelected,false)),report in panelSynchronizeReportItensResume,true,true);IF({{panelSynchronizeReportResumeSelected}},UpdateItemField({{panelSynchronizeReportResumeSelectAll}},true),UpdateItemField({{panelSynchronizeReportResumeSelectAll}},false))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\group\panelSecurityGroupNewOrEdit.html
UpdateDataField(panelSecurityGroupDefaultValue,Name,{{panelExplorerObjectData.Name}});UpdateDataField(panelSecurityGroupDefaultValue,Description,{{panelExplorerObjectData.Description}})
IF({{panelExplorerObjectData.ReferenceCode}}=,UpdateDataField(panelSecurityGroupOrEditObjectSave,Name,{{panelSecurityGroupDefaultValue.Name}});UpdateDataField(panelSecurityGroupOrEditObjectSave,Description,{{panelSecurityGroupDefaultValue.Description}}))
IF(HasDataChanges(=,panelSecurityGroupOrEditObjectSave), ShowWindow(Loading);PostDataItem(panelSecurityGroupOrEditObjectSave);Notify(explorerFolderSelected);CloseWindow();CloseWindow(), CloseWindow())
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\group\panelSecurityGroupTabs.html
ShowWindow(Loading);IF(HasDataChanges(,panelSecurityGroupSelectedObjectsList),PostDataItem(panelSecurityGroupSelectedObjectsList,));IF(HasDataChanges(,panelSecurityGroupSelectedUsersList),PostDataItem(panelSecurityGroupSelectedUsersList,));IF(HasDataChanges(,panelSecurityGroupSelectedRolesList),PostDataItem(panelSecurityGroupSelectedRolesList,));IF(HasDataChanges(,panelSecurityGroupFeaturesList),PostDataItem(panelSecurityGroupFeaturesList,));CloseWindow(windows)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\role\panelSecurityRoleNewOrEdit.html
IF({{panelSecurityRoleOrEditObjectClipboardData.ReferenceCode}}=,UpdateDataField(panelSecurityRoleOrEditObjectSave,Name,{{panelSecurityRoleOrEditObjectClipboardData.Name}});UpdateDataField(panelSecurityRoleOrEditObjectSave,Description,{{panelSecurityRoleOrEditObjectClipboardData.Description}}))
Execute({{panelSecurityRoleOrEditLoadingNameDescription}});Execute({{panelSecurityRoleOrEditUpdateTabContextSelectedFromIsDynamicField}})
IF({{panelSecurityRoleOrEditObjectTabContextSelected}}=0,UpdateDataField(panelSecurityRoleOrEditObjectSave,IsDynamic,false),UpdateDataField(panelSecurityRoleOrEditObjectSave,IsDynamic,true))
IF({{panelSecurityRoleOrEditObjectSave.IsDynamic}},UpdateData(panelSecurityRoleOrEditObjectTabContextSelected,1),UpdateData(panelSecurityRoleOrEditObjectTabContextSelected,0))
UpdateDataField(panelSecurityRoleOrEditObjectSave,ApplicationCode,{{panelSecurityRoleOrEditObjectApplicationCode}});Execute({{panelSecurityRoleOrEditUpdateIsDynamicFieldFromTabContextSelected}});ShowWindow(Loading);PostDataItem(panelSecurityRoleOrEditObjectSave,);Notify(explorerFolderSelected);CloseWindow();CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\role\panelSecurityRoleTabs.html
ShowWindow(Loading);PostDataItem(panelSecurityRoleSelectedUsersList,);PostDataItem(panelSecurityRoleSelectedGroupList,);CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\transferowner\panelTransferOwner.html
UpdateData(panelTransferOwnerAllObjectsBackup,{{panelTransferOwnerAllObjects}})
UpdateDataFieldLookup(panelTransferOwnerAllObjects,Code,{{objectSelected.ObjectCode}},Selected,true,false)
AddDataItem(panelTransferOwnerObjectsSelected,{{object.Code}});UpdateItemField({{object.Selected}},true)
RemoveDataItem(panelTransferOwnerObjectsSelected,{{object.Code}});UpdateItemField({{object.Selected}},false)
ExecuteDataItem({{panelTransferOwnerSelectObject}},object in panelTransferOwnerAllObjects,true,true,object in object.ChildrenObjects);Notify(panelTransferOwnerFlatListObjects)
ExecuteDataItem({{panelTransferOwnerUnselectObject}},object in panelTransferOwnerAllObjects,true,true,object in object.ChildrenObjects);Notify(panelTransferOwnerFlatListObjects)
IF({{panelTransferOwnerDataSave}},CloseWindow(),UnloadData(panelTransferOwnerDataSave));
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\user\panelSecurityUserApplications.html
UpdateDataField(panelDefinitionClipboard,Icon,{{panelSecurityUserClipboard.TypeImageClass}});UpdateDataField(panelDefinitionClipboard,Title,{{panelSecurityUserClipboard.Type}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{panelSecurityUserClipboard.Name}});UpdateDataField(panelDefinitionClipboard,Listname,{{word.Applications}});UpdateDataField(panelObjectClipboard,applicationsSelected,CreateReference({{panelSecurityUserListApplicationsByUser}}));UpdateDataField(panelObjectClipboard,applicationsAvailable,CreateReference({{panelSecurityUserListApplicationsAvailableForUser}}));UpdateDataField(panelObjectClipboard,profiles,CreateReference({{panelSecurityUserListAllProfiles}}));ShowWindow(~/app/security/user/panelSecurityUserApplicationsManage.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\user\panelSecurityUserApplicationsManage.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\user\panelSecurityUserNewOrEdit.html
IF({{panelSecurityUserNewOrEditObjectClipboard.Code}}=,UpdateData(panelSecurityUserNewOrEditParentCode,{{explorerFolderSelected.Code}}))
UpdateDataField(panelSecurityUserNewOrEditObjectSave,ApplicationsAccessAllowed,{{panelSecurityUserNewOrEditArrayApplications}})
IF(HasDataChanges(,panelSecurityUserNewOrEditObjectSave),ShowWindow(Loading);Execute({{panelSecurityUserNewOrEditArrayUpdate}});PostDataItem(panelSecurityUserNewOrEditObjectSave);CloseWindow();CloseWindow(),CloseWindow())
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\user\panelSecurityUserServicesNewOrEdit.html
SetClipboard({{panelSecurityUserServiceObject.Token}});UpdateDataField(panelSecurityUserServiceObjectControllers,copy,true);CreateTimer(UpdateDataField(panelSecurityUserServiceObjectControllers,copy,false),1500)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\security\user\panelSecurityUserTabs.html
UpdateData(panelSecurityUserFeatureApplicationCode,{{panelSecurityUserApplicationsInserted.[0].Key}});UpdateData(panelSecurityUserFeaturesGroupsListSelected,{{panelSecurityUserSelectedGroupList}});PostDataItem(panelSecurityUserFeaturesGroupsListSelected)
UpdateDataField(panelDefinitionClipboard,Icon,{{panelSecurityUserClipboard.TypeImageClass}});UpdateDataField(panelDefinitionClipboard,Title,{{panelSecurityUserClipboard.Type}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{panelSecurityUserClipboard.Name}})
ShowWindow(Loading);IF(HasDataChanges(,panelSecurityUserSelectedObjectsList),PostDataItem(panelSecurityUserSelectedObjectsList,);AcceptDataChanges(=,panelSecurityUserSelectedObjectsList));IF(HasDataChanges(,panelSecurityUserSelectedGroupList),PostDataItem(panelSecurityUserSelectedGroupList,);AcceptDataChanges(=,panelSecurityUserSelectedGroupList));IF(HasDataChanges(,panelSecurityUserSelectedRolesList),PostDataItem(panelSecurityUserSelectedRolesList,);AcceptDataChanges(=,panelSecurityUserSelectedRolesList));IF(HasDataChanges(,panelSecurityUserFeaturesSelectedByUser),PostDataItem(panelSecurityUserFeaturesSelectedByUser,);AcceptDataChanges(=,panelSecurityUserFeaturesSelectedByUser));IF(HasDataChanges(,panelSecurityUserListApplicationsByUser),PostDataItem(panelSecurityUserListApplicationsByUser,);AcceptDataChanges(=,panelSecurityUserListApplicationsByUser);ReloadData(panelSecurityUserSelectedApplications);ReloadData(panelSecurityUserListAllAvailableGroups));IF(HasDataChanges(,panelSecurityUserServices),PostDataItem(panelSecurityUserServices,);AcceptDataChanges(=,panelSecurityUserServices));CloseWindow(windows)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\system\insight\index.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppUsers);UpdateDataField(panelDefinitionClipboard,Title,{{word.User}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,ShowSave,false);ShowWindow(~/app/system/insight/panelProfilerRequestFilter.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppProperties);UpdateDataField(panelDefinitionClipboard,Title,{{word.Configuration}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,ShowSave,false);ShowWindow(~/app/system/insight/panelProfilerConfiguration.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppRequests);UpdateData(systemClipboard,{{profilerRequest}});UpdateDataField(panelDefinitionClipboard,Title,{{word.Request}});UpdateDataField(panelDefinitionClipboard,Subtitle,);ShowWindow(~/app/system/insight/panelProfilerRequest.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppRequests);UpdateData(systemClipboard,{{data}});UpdateDataField(panelDefinitionClipboard,Title,{{word.Data}});UpdateDataField(panelDefinitionClipboard,Subtitle,);ShowWindow(~/app/system/insight/panelProfilerData.html,panel)
UnloadData(profilerRequestsClear);IF({{profilerRequestsClear}},ReloadData(profilerRequests))
ReloadData(profilerMetrics);IF({{profilerSession.IsRunning}},ReloadData(profilerRequests))
UpdateSector(ribbon,~/app/system/insight/ribbon.html,,false,false,=);CreateTimer({{functionInsightTimerTick}},2000, true)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\system\insight\panelProfilerConfiguration.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\system\insight\panelProfilerData.html
UpdateDataField(windowDefinition,Title,{{word.Data}});UpdateDataField(profilerRequestData,ParametersCommand,{{profilerRequestData.Parameters}} {{profilerRequestData.Command}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\system\insight\panelProfilerRequest.html
UpdateDataField(windowDefinition,Title,{{word.Request}});
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\system\insight\panelProfilerRequestFilter.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\system\insight\ribbon.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\holiday\panelHoliday.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppWorkflowProcess);ReloadData(panelHolidayListReference);UpdateDataField(panelObjectClipboard,,CreateReference({{panelHolidayListReference}}));UpdateDataField(panelDefinitionClipboard,CreateEdit,{{text.NewHoliday}});ShowWindow(~/app/workflow/holiday/panelHolidayEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,pp ppWorkflowProcess);UpdateDataField(panelDefinitionClipboard,CreateEdit,{{text.EditHoliday}});ShowWindow(~/app/workflow/holiday/panelHolidayEdit.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\holiday\panelHolidayEdit.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\app\workflow\transferownership\panelTransferOwnership.html
UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowUserTransfer)
UpdateItemField({{process.Selected}},true);AddDataItem(panelTransferOwnershipProcessSelected,{{process}});AddDataItem(panelTransferOwnershipProcessSelectedResume,{{process.ProcessCode}});UpdateData(panelTransferOwnershipDataProcess,{{process}});Execute({{panelTransferOwnershipFunctionSelectAllInstances}});Notify(panelTransferOwnershipGetInstancesAvailable);Notify(panelTransferOwnershipInstancesSelected)
ExecuteDataItem(UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,code,{{instance.InstanceCode}});UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,name,{{instance.InstanceName}});UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,hierarchy,{{panelTransferOwnershipDataProcess.ProcessCode}});AddDataItem(panelTransferOwnershipInstancesSelectedResume,{{panelTransferOwnershipDataAddInstanceListResume}});AddDataItem(panelTransferOwnershipInstancesSelected,{{instance.InstanceCode}}),instance in panelTransferOwnershipDataProcess.WorkflowTransferOwnershipInstances,!ContainsDataItem({{panelTransferOwnershipInstancesSelectedResume.code}},{{instance.InstanceCode}}),true)
ExecuteDataItem(UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,code,{{instance.InstanceCode}});UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,name,{{instance.InstanceName}});UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,hierarchy,{{panelTransferOwnershipDataProcess.ProcessCode}});RemoveDataItemLookup(panelTransferOwnershipInstancesSelectedResume,code,{{instance.InstanceCode}});RemoveDataItem(panelTransferOwnershipInstancesSelected,{{instance.InstanceCode}});,instance in panelTransferOwnershipDataProcess.WorkflowTransferOwnershipInstances,true,true)
IF(!ContainsDataItem({{panelTransferOwnershipProcessSelectedResume}},{{process.ProcessCode}}),AddDataItem(panelTransferOwnershipProcessSelectedResume,{{process.ProcessCode}}));UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,code,{{instance.InstanceCode}});UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,name,{{instance.InstanceName}});IF(!{{panelTransferOwnershipDataProcess.ProcessCode}},UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,hierarchy,{{process.ProcessCode}}),UpdateDataField(panelTransferOwnershipDataAddInstanceListResume,hierarchy,{{panelTransferOwnershipDataProcess.ProcessCode}}))
ExecuteDataItem({{panelTransferOwnershipSelectProcesses}},process in panelTransferOwnershipGetInstancesAvailable,!ContainsDataItem({{panelTransferOwnershipProcessSelected.ProcessCode}},{{process.ProcessCode}}),true)
ExecuteDataItem({{panelTransferOwnershipRemoveProcesses}},process in panelTransferOwnershipGetInstancesAvailable,true,true);ClearData(panelTransferOwnershipInstancesSelected,false);ClearData(panelTransferOwnershipInstancesSelectedResume);ClearData(panelTransferOwnershipProcessSelectedResume);ClearData(panelTransferOwnershipProcessSelected);Notify(panelTransferOwnershipInstancesSelected);Notify(panelTransferOwnershipGetInstancesAvailable)
UpdateItemField({{process.Selected}},true);AddDataItem(panelTransferOwnershipProcessSelectedResume,{{process.ProcessCode}});AddDataItem(panelTransferOwnershipProcessSelected,{{process}});UpdateData(panelTransferOwnershipDataProcess,{{process}});Execute({{panelTransferOwnershipFunctionSelectAllInstances}});Notify(panelTransferOwnershipInstancesSelected);Notify(panelTransferOwnershipGetInstancesAvailable)
UpdateItemField({{process.Selected}},false);RemoveDataItemLookup(panelTransferOwnershipProcessSelected,ProcessCode,{{process.ProcessCode}});UpdateData(panelTransferOwnershipDataProcess,{{process}});Execute({{panelTransferOwnershipFunctionRemoveAllInstances}});Notify(panelTransferOwnershipInstancesSelected);Notify(panelTransferOwnershipGetInstancesAvailable)
Execute({{panelTransferOwnershipCreateObject}});AddDataItem(panelTransferOwnershipInstancesSelectedResume,{{panelTransferOwnershipDataAddInstanceListResume}});AddDataItem(panelTransferOwnershipInstancesSelected,{{instance.InstanceCode}});Notify(panelTransferOwnershipInstancesSelected);Notify(panelTransferOwnershipGetInstancesAvailable);
Execute({{panelTransferOwnershipCreateObject}});UpdateItemField({{process.Selected}},false);RemoveDataItemLookup(panelTransferOwnershipProcessSelected,ProcessCode,{{process.ProcessCode}});RemoveDataItemLookup(panelTransferOwnershipInstancesSelectedResume,code,{{instance.InstanceCode}});RemoveDataItem(panelTransferOwnershipInstancesSelected,{{instance.InstanceCode}});Notify(panelTransferOwnershipInstancesSelected);Notify(panelTransferOwnershipGetInstancesAvailable);
IF({{panelTransferOwnershipDataSave.UpdateResponsibleDataTable}}=,UpdateDataField(panelTransferOwnershipDataSave,UpdateResponsibleDataTable,false));UpdateDataField(panelTransferOwnershipDataSave,InstanceCodes,{{panelTransferOwnershipInstancesSelected}});PostDataItem(panelTransferOwnershipDataSave);CloseWindow()
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\dashboard\dashboard.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\dropdowncolorpicker\dropdowncolorpicker.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\featurescardsgroup\featurescardsgroup.html
{{dcFeaturesCardsGroupProperties.featuresavailable}}
{{dcFeaturesCardsGroupProperties.featuresselected}}
ExecuteDataItem(IF(!{{featureupdate.IsReadOnly}},{{dcFeaturesCardsGroupAddCodeList}}),featureupdate in dcFeaturesCardsGroupListSelectedFeaturesListAdmin,!ContainsDataItem({{dcFeaturesCardsGroupSelectedFeatureCode}},{{featureupdate.Code}}),true);Notify(dcFeaturesCardsGroupSelectedFeatureCode)
ExecuteDataItem({{dcFeaturesCardsGroupRemoveCodeList}},featureupdate in dcFeaturesCardsGroupListSelectedFeaturesListAdmin,true,true);Notify(dcFeaturesCardsGroupSelectedFeatureCode)
IF({{dcFeaturesCardsGroupProperties.disableselection}},ExecuteDataItem(IF({{featureGroupSelected.GroupNameListMessage.length}}>0,UpdateItemField({{featureGroupSelected.Selected}},true,false)),featureGroupSelected in dcFeaturesCardsGroupUserFeaturesGroupsSelectedAdmin,true,true);UpdateData(dcFeaturesCardsGroupListSelectedFeaturesListAdmin,{{dcFeaturesCardsGroupUserFeaturesGroupsSelectedAdmin}});UpdateData(dcFeaturesCardsGroupCountSelectedAdmin,{{dcFeaturesCardsGroupCountUserFeaturesGroupsSelectedAdmin}});Execute({{dcFeaturesCardsGroupUpdateAdminAllSelected}}))
ExecuteDataItem(IF(!{{featureupdate.IsReadOnly}},{{dcFeaturesCardsGroupAddCodeList}}),featureupdate in dcFeaturesCardsGroupListSelectedFeaturesListManager,!ContainsDataItem({{dcFeaturesCardsGroupSelectedFeatureCode}},{{featureupdate.Code}}),true);Notify(dcFeaturesCardsGroupSelectedFeatureCode)
ExecuteDataItem({{dcFeaturesCardsGroupRemoveCodeList}},featureupdate in dcFeaturesCardsGroupListSelectedFeaturesListManager,true,true);Notify(dcFeaturesCardsGroupSelectedFeatureCode)
IF({{dcFeaturesCardsGroupProperties.disableselection}},ExecuteDataItem(IF({{featureGroupSelected.GroupNameListMessage.length}}>0,UpdateItemField({{featureGroupSelected.Selected}},true,false)),featureGroupSelected in dcFeaturesCardsGroupUserFeaturesGroupsSelectedManager,true,true);UpdateData(dcFeaturesCardsGroupListSelectedFeaturesListManager,{{dcFeaturesCardsGroupUserFeaturesGroupsSelectedManager}});UpdateData(dcFeaturesCardsGroupCountSelectedManager,{{dcFeaturesCardsGroupCountUserFeaturesGroupsSelectedManager}});Execute({{dcFeaturesCardsGroupUpdateManagerAllSelected}}))
ExecuteDataItem(IF(!{{featureupdate.IsReadOnly}},{{dcFeaturesCardsGroupAddCodeList}}),featureupdate in dcFeaturesCardsGroupListSelectedFeaturesListAnalyst,!ContainsDataItem({{dcFeaturesCardsGroupSelectedFeatureCode}},{{featureupdate.Code}}),true);Notify(dcFeaturesCardsGroupSelectedFeatureCode)
ExecuteDataItem({{dcFeaturesCardsGroupRemoveCodeList}},featureupdate in dcFeaturesCardsGroupListSelectedFeaturesListAnalyst,true,true);Notify(dcFeaturesCardsGroupSelectedFeatureCode)
IF({{dcFeaturesCardsGroupProperties.disableselection}},ExecuteDataItem(IF({{featureGroupSelected.GroupNameListMessage.length}}>0,UpdateItemField({{featureGroupSelected.Selected}},true,false)),featureGroupSelected in dcFeaturesCardsGroupUserFeaturesGroupsSelectedAnalyst,true,true);UpdateData(dcFeaturesCardsGroupListSelectedFeaturesListAnalyst,{{dcFeaturesCardsGroupUserFeaturesGroupsSelectedAnalyst}});UpdateData(dcFeaturesCardsGroupCountSelectedAnalyst,{{dcFeaturesCardsGroupCountUserFeaturesGroupsSelectedAnalyst}});Execute({{dcFeaturesCardsGroupUpdateAnalystAllSelected}}))
ExecuteDataItem(IF(!{{featureupdate.IsReadOnly}},{{dcFeaturesCardsGroupAddCodeList}}),featureupdate in dcFeaturesCardsGroupListSelectedFeaturesListPlanner,!ContainsDataItem({{dcFeaturesCardsGroupSelectedFeatureCode}},{{featureupdate.Code}}),true);Notify(dcFeaturesCardsGroupSelectedFeatureCode)
ExecuteDataItem({{dcFeaturesCardsGroupRemoveCodeList}},featureupdate in dcFeaturesCardsGroupListSelectedFeaturesListPlanner,true,true);Notify(dcFeaturesCardsGroupSelectedFeatureCode)
IF({{dcFeaturesCardsGroupProperties.disableselection}},ExecuteDataItem(IF({{featureGroupSelected.GroupNameListMessage.length}}>0,UpdateItemField({{featureGroupSelected.Selected}},true,false)),featureGroupSelected in dcFeaturesCardsGroupUserFeaturesGroupsSelectedPlanner,true,true);UpdateData(dcFeaturesCardsGroupListSelectedFeaturesListPlanner,{{dcFeaturesCardsGroupUserFeaturesGroupsSelectedPlanner}});UpdateData(dcFeaturesCardsGroupCountSelectedPlanner,{{dcFeaturesCardsGroupCountUserFeaturesGroupsSelectedPlanner}});Execute({{dcFeaturesCardsGroupUpdatePlannerAllSelected}}))
IF(!{{featureupdate.GroupNameListMessage}},AddDataItem(dcFeaturesCardsGroupSelectedFeatureCode,{{featureupdate.Code}},false))
IF(!{{featureupdate.GroupNameListMessage}},RemoveDataItem(dcFeaturesCardsGroupSelectedFeatureCode,{{featureupdate.Code}},false))
IF({{dcFeaturesCardsGroupCountSelectedAdmin.length}}={{dcFeaturesCardsGroupListSelectedFeaturesListAdmin.length}},UpdateDataField(dcFeaturesCardsGroupListObjects,adminallselected,true),UpdateDataField(dcFeaturesCardsGroupListObjects,adminallselected,false))
IF({{dcFeaturesCardsGroupCountSelectedManager.length}}={{dcFeaturesCardsGroupListSelectedFeaturesListManager.length}},UpdateDataField(dcFeaturesCardsGroupListObjects,manageallselected,true),UpdateDataField(dcFeaturesCardsGroupListObjects,manageallselected,false))
IF({{dcFeaturesCardsGroupCountSelectedAnalyst.length}}={{dcFeaturesCardsGroupListSelectedFeaturesListAnalyst.length}},UpdateDataField(dcFeaturesCardsGroupListObjects,analystallselected,true),UpdateDataField(dcFeaturesCardsGroupListObjects,analystallselected,false))
IF({{dcFeaturesCardsGroupCountSelectedPlanner.length}}={{dcFeaturesCardsGroupListSelectedFeaturesListPlanner.length}},UpdateDataField(dcFeaturesCardsGroupListObjects,plannerallselected,true),UpdateDataField(dcFeaturesCardsGroupListObjects,plannerallselected,false))
Execute({{dcFeaturesCardsGroupUserFeaturesGroupsSelectedAdminFunc}});Execute({{dcFeaturesCardsGroupUserFeaturesGroupsSelectedManagerFunc}});Execute({{dcFeaturesCardsGroupUserFeaturesGroupsSelectedAnalystFunc}});Execute({{dcFeaturesCardsGroupUserFeaturesGroupsSelectedPlannerFunc}})
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\featurescardsuser\featurescardsuser.html
{{dcFeaturesCardsUserProperties.applicationselected}}
{{dcFeaturesCardsUserProperties.featuresavailable}}
ExecuteDataItem(IF(!{{featureupdate.IsReadOnly}},{{dcFeaturesCardsUserAddCodeList}}),featureupdate in dcFeaturesCardsUserListSelectedFeaturesListAdmin,!ContainsDataItem({{dcFeaturesCardsUserSelectedFeatureCode}},{{featureupdate.Code}}),true);Notify(dcFeaturesCardsUserSelectedFeatureCode)
ExecuteDataItem({{dcFeaturesCardsUserRemoveCodeList}},featureupdate in dcFeaturesCardsUserListSelectedFeaturesListAdmin,true,true);Notify(dcFeaturesCardsUserSelectedFeatureCode)
ExecuteDataItem(IF(!{{featureupdate.IsReadOnly}},{{dcFeaturesCardsUserAddCodeList}}),featureupdate in dcFeaturesCardsUserListSelectedFeaturesListManager,!ContainsDataItem({{dcFeaturesCardsUserSelectedFeatureCode}},{{featureupdate.Code}}),true);Notify(dcFeaturesCardsUserSelectedFeatureCode)
ExecuteDataItem({{dcFeaturesCardsUserRemoveCodeList}},featureupdate in dcFeaturesCardsUserListSelectedFeaturesListManager,true,true);Notify(dcFeaturesCardsUserSelectedFeatureCode)
ExecuteDataItem(IF(!{{featureupdate.IsReadOnly}},{{dcFeaturesCardsUserAddCodeList}}),featureupdate in dcFeaturesCardsUserListSelectedFeaturesListAnalyst,!ContainsDataItem({{dcFeaturesCardsUserSelectedFeatureCode}},{{featureupdate.Code}}),true);Notify(dcFeaturesCardsUserSelectedFeatureCode)
ExecuteDataItem({{dcFeaturesCardsUserRemoveCodeList}},featureupdate in dcFeaturesCardsUserListSelectedFeaturesListAnalyst,true,true);Notify(dcFeaturesCardsUserSelectedFeatureCode)
ExecuteDataItem(IF(!{{featureupdate.IsReadOnly}},{{dcFeaturesCardsUserAddCodeList}}),featureupdate in dcFeaturesCardsUserListSelectedFeaturesListPlanner,!ContainsDataItem({{dcFeaturesCardsUserSelectedFeatureCode}},{{featureupdate.Code}}),true);Notify(dcFeaturesCardsUserSelectedFeatureCode)
ExecuteDataItem({{dcFeaturesCardsUserRemoveCodeList}},featureupdate in dcFeaturesCardsUserListSelectedFeaturesListPlanner,true,true);Notify(dcFeaturesCardsUserSelectedFeatureCode)
AddDataItem(dcFeaturesCardsUserSelectedFeatureCode,{{featureupdate.Code}},false)
RemoveDataItem(dcFeaturesCardsUserSelectedFeatureCode,{{featureupdate.Code}},false)
IF({{dcFeaturesCardsUserCountSelectedAdmin.length}}={{dcFeaturesCardsUserListSelectedFeaturesListAdmin.length}},UpdateDataField(dcFeaturesCardsUserListAllSelectedFlags,adminallselected,true),UpdateDataField(dcFeaturesCardsUserListAllSelectedFlags,adminallselected,false))
IF({{dcFeaturesCardsUserCountSelectedManager.length}}={{dcFeaturesCardsUserListSelectedFeaturesListManager.length}},UpdateDataField(dcFeaturesCardsUserListAllSelectedFlags,manageallselected,true),UpdateDataField(dcFeaturesCardsUserListAllSelectedFlags,manageallselected,false))
IF({{dcFeaturesCardsUserCountSelectedAnalyst.length}}={{dcFeaturesCardsUserListSelectedFeaturesListAnalyst.length}},UpdateDataField(dcFeaturesCardsUserListAllSelectedFlags,analystallselected,true),UpdateDataField(dcFeaturesCardsUserListAllSelectedFlags,analystallselected,false))
IF({{dcFeaturesCardsUserCountSelectedPlanner.length}}={{dcFeaturesCardsUserListSelectedFeaturesListPlanner.length}},UpdateDataField(dcFeaturesCardsUserListAllSelectedFlags,plannerallselected,true),UpdateDataField(dcFeaturesCardsUserListAllSelectedFlags,plannerallselected,false))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\grouplistbox\grouplistbox.html
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeGroupsSelectedGroupClipboard,CreateReference({{dcGroupListViewSelectedGroupsCode}}));UpdateDataField(panelObjectClipboard,allGroupsGroupClipboard,CreateReference({{dcGroupListViewAllGroups}}));ShowWindow(~/app/components/grouplistview/panelGroupNewEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeGroupsSelectedGroupClipboard,CreateReference({{dcGroupListViewSelectedGroupsCode}}));UpdateDataField(panelObjectClipboard,allGroupsGroupClipboard,CreateReference({{dcGroupListViewAllGroups}}));ShowWindow(~/app/components/grouplistview/panelGroupView.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\listbox\listbox.html
UpdateDataField(panelDefinitionClipboard,Icon,{{dcListBoxParameters.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcListBoxParameters.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcListBoxParameters.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcListBoxParameters.listname}});UpdateDataField(panelObjectClipboard,codeItensSelectedItensClipboard,CreateReference({{dcListBoxItemSelectedList}}));UpdateDataField(panelObjectClipboard,Code,{{dcListBoxParameters.code}});ShowWindow(~/app/{{dcListBoxParameters.actionbutton}}.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\listtree\listtree.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\membergrid\membergrid.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\memberselection\memberselection.html
IF({{dcProperties.singlemember}},UpdateDataField(panelMemberAggregationType,Type,2,false),);UpdateDataField(panelMemberAgreggationSelected,Value,{{panelMemberSelectionAgreggationTypeList.[0].Value}});
ExecuteDataItem(UpdateItemField({{member.Selected}},true),member in dcMemberSelectionAllMembers,ContainsDataItem({{dcMemberSelectionFormFilterMemberIdSelection}},{{member.MemberId}}),true,member in member.Children);Execute({{panelMemberSelectionOnChangeModelAction}})
UpdateDataFieldLookup(panelMemberSelectionMemberFlatList,MemberId,{{listTreeItem.MemberId}},Selected,false);UpdateItemField({{listTreeItem.Selected}},false);RemoveDataItemLookup({{dcMemberSelectionFormFilter.Members}},MemberId,{{listTreeItem.MemberId}});RemoveDataItem(panelMemberSelectedMemberId,{{listTreeItem.MemberId}});Notify(panelMemberSelectionMemberList)
IF(!{{dcMemberSelectionMembersStateList.state}},ToggleItemField({{dcMemberSelectionMembersStateList.state}}));IF({{listTreeItem}},IF({{dcProperties.singlemember}},IF({{dcMemberSelectionFormFilter.Members.length}}!=1,Execute({{panelMemberSelectedItem}}),Execute({{panelMemberUnselectedItem}})),Execute({{panelMemberSelectedItem}})),)
AddDataItem(panelMemberSelectedMemberId,{{listTreeItem.MemberId}});UpdateDataFieldLookup(panelMemberSelectionMemberFlatList,MemberId,{{listTreeItem.MemberId}},Selected,true);UpdateItemField({{listTreeItem.EditAggregation}},false,false);UpdateItemField({{listTreeItem.Selected}},true,false);UpdateItemField({{listTreeItem.AggregationCode}},{{panelMemberAgreggationSelected.Value}},false);UpdateItemField({{listTreeItem.AggregationName}},{{panelMemberAgreggationSelected.Text}},false);Execute({{dcMemberSelectionAddNewMember}});Notify(panelMemberSelectionMemberList)
UpdateDataField(dcMemberSelectionNewMember,MemberId,{{listTreeItem.MemberId}},false);UpdateDataField(dcMemberSelectionNewMember,MemberName,{{listTreeItem.MemberName}},false);UpdateDataField(dcMemberSelectionNewMember,Relationship,{{listTreeItem.AggregationCode}},false);UpdateDataField(dcMemberSelectionNewMember,RelationshipName,{{listTreeItem.AggregationName}},false);UpdateDataField(dcMemberSelectionNewMember,HierarchyCode,{{panelMemberHierarchyCodeSelected.Value}},false);AddDataItem({{dcMemberSelectionFormFilter.Members}},{{dcMemberSelectionNewMember}})
UpdateItemField({{panelMemberSelectedFunctionsButtons.morefunctions}},false);IF({{dcMemberSelectionMembersStateList.listhierarchy}},Execute({{panelMemberSelectionActionColapseAll}});UpdateDataField(dcMemberSelectionMembersStateList,listhierarchy,false);UpdateData(panelMemberSelectionMemberList,{{panelMemberSelectionMemberFlatList}}),UpdateDataField(dcMemberSelectionMembersStateList,listhierarchy,true);UpdateData(panelMemberSelectionMemberList,{{dcMemberSelectionAllMembers}}));Notify(dcMemberSelectionMembersStateList)
ExecuteDataItem(UpdateItemField({{member.Collapsed}},false),member in panelMemberSelectionMemberFlatList,true,true);UpdateData(panelMemberSelectionMemberList,{{dcMemberSelectionAllMembers}})
ExecuteDataItem(UpdateItemField({{member.Collapsed}},true),member in panelMemberSelectionMemberFlatList,true,true);UpdateData(panelMemberSelectionMemberList,{{dcMemberSelectionAllMembers}})
ExecuteDataItem(IF({{member.Selected}},UpdateItemField({{member.Collapsed}},false)),member in panelMemberSelectionMemberFlatList,true,true);UpdateData(panelMemberSelectionMemberList,{{dcMemberSelectionAllMembers}})
ExecuteDataItem(IF({{member.Selected}},UpdateItemField({{member.Collapsed}},true)),member in panelMemberSelectionMemberFlatList,true,true);UpdateData(panelMemberSelectionMemberList,{{dcMemberSelectionAllMembers}})
IF({{panelObjectClipboard.ClearSelectedMembers}},IF({{dcMemberSelectionFormFilter.Members.length}}>0,ClearData(dcMemberSelectionFormFilter.Members),),)
ExecuteDataItem({{panelMemberSelectionChangeAggregationMemberSelectedFalse}},memberselected in dcMemberSelectionFormFilter.Members,true,true);ExecuteDataItem({{panelMemberSelectionChangeMemberSelectedAction}},member in dcMemberSelectionFormFilter.Members,true,true);UpdateData(panelMemberSelectionMemberList,{{dcMemberSelectionAllMembers}});UpdateData(panelMemberSelectionMemberListBackup,{{dcMemberSelectionAllMembers}})
IF({{member.AggregationCode}}={{panelMemberAgreggationSelected.Value}},UpdateDataFieldLookup(panelMemberSelectionMemberFlatList,MemberId,{{member.MemberId}},Selected,true));Notify(panelMemberSelectionMemberFlatList);UpdateData(panelMemberSelectionMemberList,{{dcMemberSelectionAllMembers}})
UpdateItemField({{memberselected.Selected}},false);UpdateDataFieldLookup(panelMemberSelectionMemberFlatList,MemberId,{{memberselected.MemberId}},Selected,false)
IF({{selected}},RemoveDataItem({{dcMemberSelectionFormFilter.Members}},{{selected}});RemoveDataItem(panelMemberSelectedMemberId,{{selected.MemberId}});IF(!ContainsDataItem({{panelMemberSelectedMemberId}},{{selected.MemberId}}),UpdateDataFieldLookup(panelMemberSelectionMemberFlatList,MemberId,{{selected.MemberId}},Selected,false);UpdateData(panelMemberSelectionMemberList,{{dcMemberSelectionAllMembers}}));Notify(dcMemberSelectionFormFilter))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\multitab\multitab.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\objectlistbox\objectlistbox.html
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeObjectsSelectedObjectClipboard,CreateReference({{dcObjectListViewSelectedObjectsCode}}));UpdateDataField(panelObjectClipboard,allObjectsClipboard,CreateReference({{dcObjectListViewAllObjects}}));ShowWindow(~/app/components/objectlistbox/panelObjectNewEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeObjectsSelectedObjectClipboard,CreateReference({{dcObjectListViewSelectedObjectsCode}}));ShowWindow(~/app/components/objectlistbox/panelObjectView.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\objectpermissionlistbox\objectpermissionlistbox.html
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeObjectsSelectedObjectClipboard,CreateReference({{dcObjectPermissionListBoxSelected}}));UpdateDataField(panelObjectClipboard,allObjectsClipboard,CreateReference({{dcObjectPermissionListBoxObjects}}));UpdateDataField(panelObjectClipboard,allPermissionsType,CreateReference({{dcObjectPermissionListBoxPermissionTypes}}));ShowWindow(~/app/components/objectpermissionlistbox/panelObjectPermissionListBoxNewEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,allObjectsSelectedClipboard,CreateReference({{dcObjectPermissionListBoxSelectedObjectsPermission}}));ShowWindow(~/app/components/objectpermissionlistbox/panelObjectPermissionListBoxView.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\powerbiembedded\powerbiembedded.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\profitability\profitability.html
{{profitabilityFunctionApply}};UpdateDataField(profitabilityChangesDataScreen,blockapplyfilter,true);UpdateDataField(profitabilityChangesDataScreen,blockapplydriver,true);UpdateDataField(profitabilityChangesDataScreen,blockrange,false);UpdateDataField(profitabilityChangesDataScreen,blockfilters,false);
ShowWindow(Loading);postDataItem(profitability);notify(profitability,,,false);UpdateDataField(profitabilityChangesDataScreen,blockapplydriver,true);UpdateDataField(profitabilityChangesDataScreen,blockapplyfilter,true);UpdateDataField(profitabilityChangesDataScreen,blockfilters,false);UpdateDataField(profitabilityChangesDataScreen,blockrange,false);CloseWindow()
ShowWindow(Loading);UpdateData(profitabilityRefresh,{{profitability}});PostDataItem(profitabilityRefresh,profitability);Notify(profitability,,,false);CloseWindow()
IF({{profitability.Pages.length}}=0,UpdateDataField(profitabilityChangesDataScreen,blockrange,true);UpdateDataField(profitabilityChangesDataScreen,blockfilters,true))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\radiobuttongrouptab\radiobuttongrouptab.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\rolelistbox\rolelistbox.html
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeRolesSelectedRoleClipboard,CreateReference({{dcRoleListBoxSelectedRolesCode}}));UpdateDataField(panelObjectClipboard,codeRolesAvailablesRoleClipboard,{{dcRoleListBoxAvailableRoles}});ShowWindow(~/app/components/rolelistbox/panelRoleNewEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeRolesSelectedRoleClipboard,CreateReference({{dcRoleListBoxSelectedRolesCode}}));UpdateDataField(panelObjectClipboard,codeRolesAvailablesRoleClipboard,{{dcRoleListBoxAvailableRoles}});ShowWindow(~/app/components/rolelistbox/panelRoleView.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\sdk\sdk.html
PostDataItem(sdkUserLogout,dkUserLogoutAnswer);ClearToken();
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\shortcut\shortcut.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\taskscardlist\taskscardlist.html
ShowWindow(Loading);UpdateDataField(explorerObjectToView,ObjectCode,{{explorerObjectInstance.Code}});UpdateDataField(explorerObjectToView,TrackExecution,{{explorerObjectInstance.TrackExecution}});UpdateDataField(explorerObjectToView,Url,{{explorerObjectInstance.OpenURL}});UpdateDataField(explorerObjectToView,Name,{{explorerObjectInstance.Name}});UpdateDataField(explorerObjectToView,Description,{{explorerObjectInstance.Description}});UpdateDataField(systemParameters,,{{explorerObjectInstance.OpenData}});UpdateDataField(systemClipboard,,{{explorerObjectToView}});UpdateDataField(explorerObjectToView,ContentCode,{{systemParameters.contentCode}});UpdateDataField(explorerTabObject,TypeImageClass,{{explorerObjectInstance.TypeImageClass}});UpdateDataField(explorerTabObject,SectorUrl,{{explorerObjectInstance.SectorUrl}});UpdateDataField(explorerTabObject,Name,{{explorerObjectInstance.Name}});UpdateDataField(explorerTabObject,LinkUrl,{{partWorkflowInstanceLinkUrl}});CreateGuid(explorerTabObject,Container);CreateGuid(explorerTabObject,ContainerRibbon);UncheckDataField(dkTabs,Selected,false);UpdateItemField({{explorerTabObject.Tick}},CreateTick());AddDataItem(dkTabs,{{explorerTabObject}});UpdateUrl({{partWorkflowInstanceLinkUrl}});UpdateSector(ribbon,~/app/shared/ribbon.html,,false,false,{{explorerTabObject.ContainerRibbon}});UpdateSector(content,{{explorerObjectInstance.SectorUrl}},,true,true,{{explorerTabObject.Container}})
UpdateDataField(panelDefinitionClipboard,Title,{{workflowInstance.TaskName}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{workflowInstance.Name}});UpdateUrl({{partWorkflowInstanceLinkUrl}});UpdateData(panelObjectClipboard,{{explorerObjectInstance}});UpdateData(systemClipboard,{{workflowInstance}});ShowWindow({{explorerObjectInstance.SectorUrl}},panel)
IF({{dcProperties.closeparent}},HideWindow(),CloseWindow());UpdateData(partWorkflowInstanceLinkUrl,~/l/instance/{{workflowInstance.Code}});IF({{explorerObjectInstance.ViewType}}=1,Execute({{cmsFunctionOpenInstanceObjectPanel}}),Execute({{cmsFunctionOpenInstanceObjectDefault}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\textboxsmart\textboxsmart.html
IF({{panelDefinitionClipboardObject.FunctionKey}}!=,UpdateDataField(textBoxSmartAttribute,FunctionKey,{{panelDefinitionClipboardObject.FunctionKey}}));IF({{panelDefinitionClipboardObject.ParameterKey}}!=,UpdateDataField(textBoxSmartAttribute,ParameterKey,{{panelDefinitionClipboardObject.ParameterKey}}))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\textboxsmartbase\textboxsmartbase.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\uploader\uploader.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\uploaderimage\uploaderimage.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\userlistbox\userlistbox.html
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeUsersSelectedUserClipboard,CreateReference({{dcUserListViewSelectedUsersCode}}));UpdateDataField(panelObjectClipboard,users,CreateReference({{dcUserListViewAllUsers}}));ShowWindow(~/app/components/userlistview/panelUserNewEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Icon,{{dcProperties.icon}});UpdateDataField(panelDefinitionClipboard,Title,{{dcProperties.title}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dcProperties.subtitle}});UpdateDataField(panelDefinitionClipboard,Listname,{{dcProperties.listname}});UpdateDataField(panelObjectClipboard,codeUsersSelectedUserClipboard,CreateReference({{dcUserListViewSelectedUsersCode}}));UpdateDataField(panelObjectClipboard,users,CreateReference({{dcUserListViewAllUsers}}));ShowWindow(~/app/components/userlistview/panelUserView.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\wizard\wizard.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\workflowinstancehistory\workflowinstancehistory.html
IF({{pageHistoryIndex}}>-1,IF({{navigationHistory.Current}}>1,UpdateDataField(navigationHistory,Count,{{pageInstanceHistory.PagesCount}});UpdateDataField(navigationHistory,Current,Cast({{navigationHistory.Current}}-1,number))));
IF({{pageHistoryIndex}}>-1,IF({{navigationHistory.Current}}<{{pageInstanceHistory.PagesCount}},UpdateDataField(navigationHistory,Count,{{pageInstanceHistory.PagesCount}});UpdateDataField(navigationHistory,Current,Cast({{navigationHistory.Current}}+1,number))));
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\workflowinstancenotes\workflowinstancenotes.html
IF({{pageIndex}}>-1,IF({{navigationNotes.Current}}>1,UpdateDataField(navigationNotes,Count,{{pageInstanceNotes.PagesCount}});UpdateDataField(navigationNotes,Current,Cast({{navigationNotes.Current}}-1,number))));
IF({{pageIndex}}>-1,IF({{navigationNotes.Current}}<{{pageInstanceNotes.PagesCount}},UpdateDataField(navigationNotes,Count,{{pageInstanceNotes.PagesCount}});UpdateDataField(navigationNotes,Current,Cast({{navigationNotes.Current}}+1,number))));
IF({{workflowInstanceNotesProperties.expanded}},UpdateDataField(workflowInstanceNotesListOptions,Show,true))
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\workflowprocess\workflowprocess.html
UpdateDataField(workflowprocess,ExplorerParentFolderCode,{{internal.explorerparentfoldercode}});UpdateDataField(workflowprocess,ExplorerObjectCode,{{systemClipboard.ObjectCode}});UpdateDataField(workflowprocess,Name,{{systemClipboard.Name}});UpdateDataField(workflowprocess,Description,{{systemClipboard.Description}})
UpdateDataField(panelDefinitionClipboard,Title,{{word.Properties}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppProperties);ShowWindow(~/app/workflow/panelWorkflowProperties.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Parameters}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowParameters);ShowWindow(~/app/workflow/panelWorkflowParametersView.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Parameters}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowParameters);ShowWindow(~/app/workflow/panelWorkflowParameterEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Responsibles}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppGroups);ShowWindow(~/app/workflow/panelWorkflowResponsiblesEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Responsibles}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppGroups);ShowWindow(~/app/workflow/panelWorkflowResponsiblesConfigure.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Responsibles}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppGroups);ShowWindow(~/app/workflow/panelWorkflowResponsiblesStructureCreate.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Responsibles}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppGroups);ShowWindow(~/app/workflow/panelWorkflowResponsiblesFilterEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{text.EmailsTemplate}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowTemplate);ShowWindow(~/app/workflow/panelWorkflowEmailsTemplateView.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{text.EmailsTemplate}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowTemplate);ShowWindow(~/app/workflow/panelWorkflowEmailsTemplateEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Emails}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowEmail);ShowWindow(~/app/workflow/panelWorkflowEmailsView.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{text.TaskIdentifier}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppTasks);ShowWindow(~/app/workflow/panelWorkflowTaskIdentifierView.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{text.TaskIdentifier}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppTasks);ShowWindow(~/app/workflow/panelWorkflowTaskIdentifierEdit.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{text.CalendarTemplate}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowCalendar);ShowWindow(~/app/workflow/panelWorkflowCalendarView.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{text.TransferOwnership}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowUserTransfer);ShowWindow(~/app/workflow/panelWorkflowTransferOwnershipView.html,panel)
UpdateDataField(panelDefinitionClipboard,Title,{{text.TransferOwnership}});UpdateDataField(panelDefinitionClipboard,Subtitle,);UpdateDataField(panelDefinitionClipboard,Icon,pp ppRainbowUserTransfer);ShowWindow(~/app/workflow/panelWorkflowTransferOwnershipEdit.html,panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\worksheet\worksheet.html
ExecuteInstanceFunction(,Save,);UpdateData(worksheetChannelRowUpdated,CreateGuid(),false)
ExecuteInstanceFunction(,SendSelectedCellToClipboard,)
ExecuteInstanceFunction(,ApplyClipboardToSelectedCells,)
UpdateDataField(panelDefinitionClipboard,Title,{{word.Properties}});UpdateDataField(panelDefinitionClipboard,Subtitle,);ShowWindow(~/app/worksheet/panelWorksheetProperties.html,panel)
ExecuteInstanceFunction(,UpdateRulesCount,);IF({{worksheetRulesInfo.Count}}>0,UpdateDataField(panelObjectClipboard,BlockApprove,true),UpdateDataField(panelObjectClipboard,BlockApprove,false));UpdateDataField(panelObjectClipboard,InstanceCode,{{explorerObjectInstanceCode}});UpdateDataField(panelObjectClipboard,CloseTabSelected,true);ShowWindow(~/app/workflow/panelWorkflowInstanceAction.html,panel);
ExecuteInstanceFunction(,UpdateRulesCount,);IF({{worksheetRulesInfo.Count}}>0,ExecuteInstanceFunction(,EnsureRulesVisible,),IF({{worksheetWorkflowInstanceActionApproveRequest}},Execute({{headerFunctionCloseTabSelected}},header)))
IF({{worksheetWorkflowInstanceActionRejectNoteRequired}},UpdateDataField(panelObjectClipboard,ExecuteValidation,true);Execute({{worksheetFunctionInstanceAction}}),IF({{worksheetWorkflowInstanceActionRejectRequest}},Execute({{headerFunctionCloseTabSelected}},header)))
UnloadData(worksheetExcelData);DownloadData(worksheetExcelData)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\dashboard\parts\CMS\partCMS.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\dashboard\parts\Explorer\partExplorer.html
IF({{recentsObject.Type}}=Folder,UpdateData(dashboardExplorerFolderSelected,{{recentsObject.Code}});UpdateDataField(dashboardBreadcrumbObject,Code,{{recentsObject.Code}});UpdateDataField(dashboardBreadcrumbObject,Name,{{recentsObject.Name}}),IF({{dashboardExplorerObjectSelected.Code}}!={{recentsObject.Code}},UpdateData(dashboardExplorerObjectSelected,{{recentsObject}}));ShowWindow(Loading);IF({{dashboardExplorerObjectSelected.Type}}=File,DownloadData(explorerObjectFile);CloseWindow(),IF({{dashboardExplorerObjectSelected.Type}}=ReportFile,DownloadData(explorerObjectReportFile);CloseWindow(),UpdateData(partExplorerObjectSelectedLinkUrl,~/l/explorer/{{recentsObject.Code}});UpdateDataField(dashboardExplorerObjectToView,TrackExecution,{{recentsObject.TrackExecution}});IF({{recentsObject.ViewType}}=1,Execute({{cmsFunctionOpenClickedObjectModePanel}}),Execute({{cmsFunctionOpenClickedObjectModeDefault}})))))
UpdateDataField(dashboardExplorerObjectToView,TargetCode,{{dashboardExplorerObjectSelected.TargetCode}});UpdateDataField(dashboardExplorerObjectToView,ObjectCode,{{dashboardExplorerObjectSelected.Code}});UpdateDataField(dashboardExplorerObjectToView,Url,{{dashboardExplorerObjectSelected.OpenURL}});UpdateDataField(dashboardExplorerObjectToView,Name,{{dashboardExplorerObjectSelected.Name}});UpdateDataField(dashboardExplorerObjectToView,Description,{{dashboardExplorerObjectSelected.Description}});UpdateData(systemParameters,{{dashboardExplorerObjectSelected.OpenData}});UpdateDataField(dashboardExplorerObjectToView,ReferenceCode,{{dashboardExplorerObjectSelected.ReferenceCode}});UpdateDataField(systemClipboard,,{{dashboardExplorerObjectToView}});UpdateDataField(dashboardExplorerTabObject,TypeImageClass,{{dashboardExplorerObjectSelected.TypeImageClass}});UpdateDataField(dashboardExplorerTabObject,SectorUrl,{{dashboardExplorerObjectSelected.SectorUrl}});UpdateDataField(dashboardExplorerTabObject,Name,{{dashboardExplorerObjectSelected.Name}});UpdateDataField(dashboardExplorerTabObject,LinkUrl,{{partExplorerObjectSelectedLinkUrl}});ClearItemField({{dashboardExplorerTabObject.Container}});ClearItemField({{dashboardExplorerTabObject.ContainerRibbon}});CreateGuid(dashboardExplorerTabObject,Container);CreateGuid(dashboardExplorerTabObject,ContainerRibbon);SwitchSector(ribbon,{{dashboardExplorerTabObject.ContainerRibbon}});UncheckDataField(dkTabs,Selected,false);UpdateItemField({{dashboardExplorerTabObject.Tick}},CreateTick());AddDataItem(dkTabs,{{dashboardExplorerTabObject}});UpdateUrl({{partExplorerObjectSelectedLinkUrl}});UpdateSector(content,{{dashboardExplorerObjectSelected.SectorUrl}},,true,true,{{dashboardExplorerTabObject.Container}})
IF({{dashboardExplorerObjectSelected.ReferenceCode}}=,UpdateDataField(dashboardExplorerObjectSelected,ViewMode,false),UpdateDataField(dashboardExplorerObjectSelected,ViewMode,true));UpdateDataField(dashboardExplorerObjectToView,TargetCode,{{dashboardExplorerObjectSelected.TargetCode}});UpdateDataField(dashboardExplorerObjectToView,ObjectCode,{{dashboardExplorerObjectSelected.Code}});UpdateDataField(dashboardExplorerObjectToView,ReferenceCode,{{dashboardExplorerObjectSelected.ReferenceCode}});UpdateData(systemClipboard,{{dashboardExplorerObjectToView}});UpdateData(panelObjectClipboard,{{dashboardExplorerObjectSelected}});UpdateDataField(panelDefinitionClipboard,Title,{{dashboardExplorerObjectSelected.Name}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{dashboardExplorerObjectSelected.Description}});CloseWindow();UpdateUrl({{partExplorerObjectSelectedLinkUrl}});ShowWindow({{dashboardExplorerObjectSelected.SectorUrl}},panel)
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\dashboard\parts\Report\partReport.html
UpdateDataField(linkObjectToView,TrackExecution,{{linkObject.TrackExecution}});IF({{linkObject.Type}}=Application,Execute({{linkFunctionOpenObjectViewPanel}}),IF({{linkObject.ViewType}}=0,Execute({{linkFunctionOpenObjectViewDefault}}),IF({{linkObject.ViewType}}=1,Execute({{linkFunctionOpenObjectViewPanel}}))))
ShowWindow(Loading);UpdateDataField(linkObjectToView,ObjectCode,{{linkObject.Code}});UpdateDataField(linkObjectToView,TargetCode,{{linkObject.TargetCode}});IF({{linkObject.ReferenceCode}},UpdateData(systemParameters,{{linkObject.OpenData}});UpdateDataField(linkObjectToView,Url,{{linkObject.OpenURL}}),UpdateData(systemParameters,{{linkObject.CreateData}});UpdateDataField(linkObjectToView,Url,{{linkObject.CreateURL}});UpdateDataField(linkObjectToView,Name,{{linkObject.Name}});UpdateDataField(linkObjectToView,Description,{{linkObject.Description}}));UpdateDataField(linkObjectToView,ReferenceCode,{{linkObject.ReferenceCode}});UpdateDataField(systemClipboard,,{{linkObjectToView}});UpdateDataField(linkTabObject,TypeImageClass,{{linkObject.TypeImageClass}});UpdateDataField(linkTabObject,SectorUrl,{{linkObject.SectorUrl}});UpdateDataField(linkTabObject,Name,{{linkObject.Name}});CreateGuid(linkTabObject,Container);UncheckDataField(dkTabs,Selected,false);UpdateItemField({{linkTabObject.Tick}},CreateTick());AddDataItem(dkTabs,{{linkTabObject}});UpdateSector(content,{{linkTabObject.SectorUrl}},,true,true,{{linkTabObject.Container}})
IF({{linkObject.ReferenceCode}},UpdateDataField(linkObject,ViewMode,true);UpdateDataField(linkObjectToView,TargetCode,{{linkObject.TargetCode}});UpdateDataField(linkObjectToView,ObjectCode,{{linkObject.Code}});UpdateDataField(linkObjectToView,ReferenceCode,{{linkObject.ReferenceCode}});UpdateData(systemClipboard,{{linkObjectToView}});UpdateData(panelObjectClipboard,{{linkObject}});UpdateDataField(panelDefinitionClipboard,Title,{{linkObject.Name}});UpdateDataField(panelDefinitionClipboard,Subtitle,{{word.[Empty]}});CloseWindow();ShowWindow({{linkObject.SectorUrl}},panel))
ShowWindow(Loading);UpdateDataField(partReportExplorerObjectCode,,{{dashboarPartItem.Properties.DrillReportCode}});Execute({{functionDrillCurrentToggle}})
ShowWindow(Loading);UpdateDataField(partReportExplorerObjectCode,,{{dashboarPartItem.Properties.ReportCode}});Execute({{functionDrillCurrentToggle}})
ToggleItemField({{dcDashboardProperties.showmaximize}});UpdateDataField(dashboardObjectAction,tag,{{dashboarPartItem.Guid}},false);ToggleItemField({{dashboardObjectAction.windowmax}},false);UpdateDataField(dashboardObjectAction,action,togglepartsize);CloseWindow();
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\dashboard\parts\WorkflowInstances\partWorkflowInstances.html
\\ powerplanning\src\WebSPA\Web\WebSPA\wwwroot\components\dashboard\parts\WorkflowNotes\partWorkflowNotes.html
ShowWindow(Loading);UpdateDataField(panelObjectClipboard,,{{workflowNote}});UpdateDataField(panelObjectClipboard,dashboardProperties,{{dashboardItemProperties}});UpdateDataField(panelDefinitionClipboard,Title,{{word.Note}});UpdateDataField(panelDefinitionClipboard,Subtitle,);CloseWindow();ShowWindow(~/app/workflow/panelWorkflowNoteRead.html,panel)
